<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chino&#39;s</title>
  
  <subtitle>編寫程式不是種能力，而是一種生活方式。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chino.taipei/"/>
  <updated>2019-03-10T20:05:28.090Z</updated>
  <id>http://chino.taipei/</id>
  
  <author>
    <name>CHUNG-SHENG WU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同的 Linux Distribution 到底差在哪裡？</title>
    <link href="http://chino.taipei/note-2019-0309%E4%B8%8D%E5%90%8C%E7%9A%84-Linux-Distribution-%E5%88%B0%E5%BA%95%E5%B7%AE%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F/"/>
    <id>http://chino.taipei/note-2019-0309不同的-Linux-Distribution-到底差在哪裡？/</id>
    <published>2019-03-08T22:01:52.000Z</published>
    <updated>2019-03-10T20:05:28.090Z</updated>
    
    <content type="html"><![CDATA[<p>網路上有著數以百計的 Linux 發行版 (Linux Distribution)，像是 Archlinux、Ubuntu、CentOS …等等。<br>每個人可能都有自己擁護的發行版，到底誰比較好？誰比較高級呢？<br>以筆者自己的經驗來看，每個發行版都有自己的優缺點和適合的地方，就以我各自用過一段時間的三個發行版：Ubuntu、Archlinux、CentOS 來說說看他們各自擅長的地方和他們的問題所在。</p><a id="more"></a><h2 id="前言：為什麼有這麼多發行版？"><a href="#前言：為什麼有這麼多發行版？" class="headerlink" title="前言：為什麼有這麼多發行版？"></a>前言：為什麼有這麼多發行版？</h2><p><a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg" target="_blank" rel="noopener">這裡</a>可以看到一張非常大的 Linux 發行版近代史圖片。</p><p>以我的感覺，Linux 的發行版其實是開源生態圈的一個現況，也就是負責人或負責團隊通常會有自己的一套核心價值觀，他們只會接受符合自己的價值觀的功能、程式碼等等，但開源的精神就是：「不爽？自己 fork 一份自己改！」<br>所以大量的發行版分別代表了某個派系和背後的某個核心理念，選擇發行版，其實就是在選擇不同的價值觀！</p><h2 id="發行版之間的差異"><a href="#發行版之間的差異" class="headerlink" title="發行版之間的差異"></a>發行版之間的差異</h2><p>發行版之間到底有什麼重要的差別呢？其實他們之所以都稱作 Linux ，就是因為他們全部共用一個 OS Kernel ，也就是我們平常稱 Linux 所指的本體：Linux kernel，這裡可以看到完整的程式碼： <a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a></p><p>因為系統的核心是一樣的，也就是說通常能在 A 發行版上面編譯、執行的程式碼什麼都不用改也可以在 B發行版上面跑。也就是說，幾乎所有的發行版理論上都能做到相同的事情。<br>不過，程式通常不會是一個完整可執行的個體，有學過 C 之類的編譯語言的人一定知道，系統裡通常會安裝很多已經編譯好的函式庫，這樣不同的程式在使用相同的函式庫時就不用在電腦裡存很多份，載入也只要載入一份，有很多好處。而 Linux 整個世界幾乎是建立在 C / C++ 上的，就算是其他語言很多最後也是從這裡往上延伸。<br>所以，整個發行版的差別，其實就在安裝的套件、函式庫、以及負責管理這些函式庫的套件管理系統。</p><p>其中最重要的，莫過於套件管理系統了！Linux 和其他作業系統如 Windows 最大的不同，就是每個發行版一定有自己的套件管理系統和套件庫，裡面包含了最基礎的系統套件，到各種應用軟體都包含在裡面，通常使用者只要下指令就可以自動搜尋安裝程式，不用向 Windows 一樣到處找安裝檔，還要怕來路不明的安裝檔等等。<br>而整個套件庫的管理就成了每個發行版不同的地方。</p><h2 id="Ubuntu-給新手的-Linux"><a href="#Ubuntu-給新手的-Linux" class="headerlink" title="Ubuntu : 給新手的 Linux"></a>Ubuntu : 給新手的 Linux</h2><p>Ubuntu 算是筆者第一個長時間當作主要工作環境的 Linux 系統。<br>它最大的優點，就是無腦安裝、無腦更新、支援的套件工具很多等等，甚至連 Steam 都標榜支援 Ubuntu。<br>友善的 GUI 界面，只下一步就可以完成的安裝界面，讓許多的 Linux 新手一改對 Linux 一定要在黑色螢幕上輸入白色指令才能操作的印象。不只新手，由於設定簡便，也成為很多企業使用的主要作業系統。</p><p>Ubuntu 使用的套件管理系統是 Debian 系列的 dpkg ，不過大家通常更熟悉他的套件庫工具 apt。對於不了解這兩者差異的人，其實這兩個東西前者是真的在系統裡管理套件的程式，後者是去套件庫上下載並用 dpkg 安裝的程式。</p><p>Ubuntu 一年一小改，兩年一大改，偶數版本為穩定版本，支援時間為 4 年。所謂的支援時間，也就是你可以持續獲得更新和 Bug 修復的時間，這段時間都可以用 apt update &amp;&amp; apt upgrade 來更新系統上的軟體。<br>Ubuntu 的支援時間在我用過得 Linux 中算是中庸的，而且也提供跨版本大升級的方法，所以也不是每兩年就要重灌。</p><p>Ubuntu 的核心思想其實就是要創造一個易於使用的 Linux 系統，讓不是電腦專家的人也可輕易使用。以這點來說它真的滿成功的，連 Windows 都怕了把它加進 Win10 裡面了 XD。<br>這幾年它做了許多的實驗，包含開發可在平板上使用的 Unity 桌面環境(失敗了)，提供自己的 App store (不太會用？)，後來背後的公司就被 Windows 併購了。</p><p>Ubuntu 作為個人使用的作業系統來說可圈可點，不過後來我還是改用了 Arch，原因大概就是因為它太新手向了，所以很多的東西在跟你講之前就自己改了很多，有很多 Linux 慣例的設定檔設定方式和其他人不一樣，也沒有完整的文件來說明這些修改，畢竟他的主要客群就是不會去改這些東西的人，所以用用還行，想要改設定什麼的就會有點痛苦。<br>另外就是，由於它包裝的太好了，對於想要透過使用 Linux 來學習和累積使用技能的人來說，就更不適合了，你很難透過使用 Ubuntu 學習到東西，向我現在有對於 Linux 比較全面的認識也是在棄用 Ubuntu 後才得到的。<br>打個比方，它就像台裝了輔助輪的腳踏車，不是不能騎，但是總覺得綁手綁腳的，而且沒辦法讓你真的學會騎腳踏車。</p><p>所以簡短來說，如果你只是要一個能用的 Linux 系統，Ubuntu 就是你最好的選擇; 如果你想要學習 Linux ，絕對不要碰 Ubuntu。（不過如果想先適應一下也還是可以用啦）</p><h2 id="Archlinux-感覺很專業的-Linux"><a href="#Archlinux-感覺很專業的-Linux" class="headerlink" title="Archlinux : 感覺很專業的 Linux"></a>Archlinux : 感覺很專業的 Linux</h2><p>筆者棄用 Ubuntu 後使用的就是 Archlinux，到現在依然是我主要使用的 Linux 發行版。<br>Archlinux 相較於其他發行版，最大的特色，就是它是一個很乾淨的發行版，而且到現在還是強調要一行一行的下指令去安裝整個系統！這也是它看起很專業的原因XDD。<br>雖說其實也很簡單，不會因為你成功安裝就代表你很專業，但你還是可以透過這個流程學到很多。<br>首先，你會知道原來系統開機是什麼順序，你可以第一次選擇要用 grub 還是其他東西開機，你可以學到 MBR 或是 EFI 開機檔的安裝，你會知道原來桌面環境也只是一套軟體，有很多不同選擇可以使用，你會學到網路如何連線等等。</p><p>Arch 使用的套件管理程式是 Packman ，和一個裡面包山包海的套件庫，和其他發行版相比，你可以在裡面找到多更多的套件，如果這還不讓你滿足，你還有 Arch 最強大的武器：AUR！<br>Arch User Repository (AUR) 是一個特殊的套件庫，裡面的套件都是原始碼、尚未編譯的版本，使用者可以自己下載下來編譯、安裝，有很多現成的工具可以幫你作這件事情，例如 yay 。有了這些工具，你可以用的套件幾乎變成了全世界所有的軟體，啥都找的到，比如 google-chome, minecraft 之類的，任何還沒、不會、不能放進官方套件庫的套件都在這裡找得到。</p><p>至於 Arch 的支援時間，是永遠，因為它是一個 rolling update 的系統，也就是它每天都在更新版本，永遠都在最新版。這代表你不用像其他作業系統一樣，每一段時間就重灌一次或是大更新一次。</p><p>Arch 的核心思想我覺得就是一個自由自在，最新的發行版，它預設的套件很少，每個人都可以安裝出屬於自己的系統，同時它加上 AUR 提供了大量的套件，是 DIY 最佳的系統。</p><p>我非常喜歡 Arch ，因為我感到無拘無束，甚至有一段時間我什麼機器都灌 Arch，直到我有一天終於遇到問題，而開始認識了 CentOS。<br>Arch 有一個非常嚴重的問題，源自於他的優點：它更新太快了!<br>要知道更新是把雙面刃，他在提供新功能、修復漏洞的同時，可能把問題帶進你原本可以運行的系統中。你可能會時常遇到一些新的 bug，每天都在修不同的問題，甚至有些更新比較慢的套件，常常會處於跟不上 Arch 最新版本的狀況，尤其是它總是跟著最新版本的 Linux kernel ，所以有些追求穩定的大型套件是不敢標榜支援 Arch 的，因為他們甚至不敢保證它可以在今天的 Arch 上正常編譯。</p><p>總結來說，Arch 拿來當作筆電桌機的作業系統沒什麼問題，尤其你有時間而且喜歡自己客製化自己的系統。大多數情況你也不用特別處理什麼問題，他的透明單純的系統也讓人很容易看到完整的樣子，進而容易學習。<br>但是如果你是個一秒幾十萬上下的商業人士，或是根本就不會也沒打算學著自己修電腦的人，那你用 Arch 前可能就要三思了。<br>畢竟，某天更新完後電腦有功能不能用的情況偶爾會發生，而且他不像是其他的系統，它不太能夠降回以前的版本，因為它都是最新版本，除非有自己備份不然舊版本的套件幾乎在網路上找不到，同時各個套件之間又盤根錯節，很難降低一個套件的版本就解決問題，同時若你想要安裝新套件，一定要先做一次全系統更新，否則可能找不到可以在你的系統上執行的套件。通常這樣的問題在自己使用的電腦上沒什麼問題，因為你通常每天使用，不會太久沒更新，就算真的更新出事了，也只是自己暫時忍耐一下即可，通常 Bug 來的快去的也快。但是這在伺服器上就很嚴重了，畢竟伺服器是講求服務穩定的。</p><p>絕對不要拿 Arch 來架設伺服器！！否則之後的人一定會恨你的。</p><h2 id="CentOS-講求穩定的-Linux"><a href="#CentOS-講求穩定的-Linux" class="headerlink" title="CentOS : 講求穩定的 Linux"></a>CentOS : 講求穩定的 Linux</h2><p>筆者在最近一年接觸了 CentOS 後，從 Arch 得來的 Linux 不穩定的概念改觀了，其實 Linux 也是可以很穩定的。<br>CentOS 其實是 RedHat 公司推出的 RedHat 企業發行版的免費版本，也就是說它其實跟 RedHat 企業版是一樣的，只是你沒辦法享受到 RedHat 提供的各類軟體支援等等。不過任何以在 RedHat 上實裝的功能和軟體在一段時間後通常都會被拉到 CentOS 上，所以基本上可以當作 RedHat 來看，也就是說，不但有穩定性，也有 RedHat 在背後保證各大軟體的支援性。</p><p>所謂的穩定，講白了其實也就只是更新的慢，CentOS 上基本上你要的各種新功能，你都「找不到！」<br>它們會把 kernel 鎖定在一個固定的版本，同時，CentOS 的支援時間長達 10年，也就是說到達支援的末期的時候 kernel 版本可能已經和現在差距很遠了。<br>不過這其實也不是什麼大問題，因為就算沒有原生的套件包可以安裝，還是可以透過自己編譯來享有需要的任何功能，加上背後有 RedHat 在協助，同時也因為他是被各大企業採用的發行版，任何企業會用到的功能如 Docker 等等通常都有支援，也就是保證可以編譯執行的意思。</p><p>CentOS 的套件管理系統是 RPM ，套件下載程式是 yum。因為和 Arch 相比 CentOS 就會比較有需要自己包裝套件的需求，所以筆者就接觸了如何包裝 RPM 套件。RPM 套件本身其實也算是一款很強大的管理系統，因為時間很久了相關的輔助工具也很完善。</p><p>在筆者用 CentOS 的第一個印像，其實是他的圖形化安裝界面，雖然乍看之下和 Ubuntu 一樣只是個下一步安裝的界面，但是其實差距很大的，你可以透過這個界面快速設定 Raid、LVM、BTRFS 等等進階的磁碟格式，可以對網路等等做些額外設定，同時他的預設選項都是偏向安裝伺服器的設置，和 Ubuntu 偏向個人使用有些差別。最後，你還可以把你的設置會出成自動安裝腳本，大量部屬一樣的機器。</p><p>所以 CentOS 的核心思想我認為就是保守，雖然跟 Arch 比什麼都舊了，但其實可以享有很多好處，比如你可以用較慢的步調去更新，一個編譯過得套件可以很長一段時間不用重新編譯也可以繼續跑等等。不像 Arch ，不用每次更新一定要全系統更新，因為系統套件不常更換，同時會盡量保證舊版本的系統套件會持續可下載一段時間，讓大家可以在要升級的時候再去升級。<br>可是同時也不是單純的放著舊的套件不更新而已，如果有重大 Bug 發生，是會同時對所有版本做修補，所有版本都可以拿到安全的更新。</p><p>CentOS 是筆者認為最適合當作伺服器使用的系統了，他的優缺點一目了然。<br>優點就是套件舊但穩定，新的東西可能要自己編譯，但通常不會不能用，加上使用量不小所以大部分軟體還是支援的，反而 Arch 就沒有那麼多軟體標榜支援了。<br>缺點也是舊，更新慢，有些 Bug 如果不是重大資安問題可能會脫很久才會修好。同時因為 kernel 版本舊，對新硬體的支援度就差了。<br>尤其硬體廠商若支援硬體驅動也大多只有支援 Ubuntu，要在全新的或是冷門的硬體上使用 CentOS 可能要自己去 patch kernel 了。但是反過來說，由於是常被拿來架伺服器的系統，伺服器的硬體廠商反而有時會特別提供 CentOS 的驅動，只能說 CentOS 就乖乖拿來在伺服器主機上架伺服器就好。</p><p>所以可以不要想要用 CentOS 當作桌機筆電的系統了，當年新出的電腦 8,9 成是跑不了 CentOS 的。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Linux 有這麼多發行版其實是個維護版本多樣性的一個很好的方式，就像演化論一樣，最終每個發行版發展出自己的長處和短處，淘汰沒有競爭力的發行版，所以最終 Linux 才有辦法走到今天的地位。甚至很多大公司也改變以前閉源的作風，把部份自己的成果開源出來，讓大家可以共享成果，有錢出錢、有力出力、各取所需，其實開源就是個完美的共產主義社會？</p><p><img src="https://i.redd.it/n9aiovqvndc01.jpg" alt="Did somebody say &#39;communism&#39;? - https://www.reddit.com/r/ProgrammerHumor/comments/7t3e0d/did_somebody_say_communism/"></p><p>雖然如此，但宗教戰爭還是不可免，越多人使用等於越強大的社群能量，這也是為什麼工程師都在默默的推坑別人自己擅長或熟悉的系統、程式語言了，弱肉強食是基本的道理，多推坑一個人就會增加這個社群的活躍程度進而增強這個軟體的功能或是更新能量。</p><p>所以我的結論，筆電裝 Arch ，伺服器用 CentOS，有錢可以用 RedHat，然後最重要的一點，Ubuntu是垃..（誤。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;網路上有著數以百計的 Linux 發行版 (Linux Distribution)，像是 Archlinux、Ubuntu、CentOS …等等。&lt;br&gt;每個人可能都有自己擁護的發行版，到底誰比較好？誰比較高級呢？&lt;br&gt;以筆者自己的經驗來看，每個發行版都有自己的優缺點和適合的地方，就以我各自用過一段時間的三個發行版：Ubuntu、Archlinux、CentOS 來說說看他們各自擅長的地方和他們的問題所在。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://chino.taipei/categories/Note/"/>
    
    
      <category term="Linux" scheme="http://chino.taipei/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>越來越不知道以後要做什麼...</title>
    <link href="http://chino.taipei/diary-2018-0711%E8%B6%8A%E4%BE%86%E8%B6%8A%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BB%A5%E5%BE%8C%E8%A6%81%E5%81%9A%E4%BB%80%E9%BA%BC/"/>
    <id>http://chino.taipei/diary-2018-0711越來越不知道以後要做什麼/</id>
    <published>2018-07-11T09:26:34.000Z</published>
    <updated>2018-07-11T10:48:00.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">忍</a><br><img src="/diary-2018-0711越來越不知道以後要做什麼/001.png" title="Name(id=id)"></p></blockquote><hr><p>超久沒寫了，事實證明固定更新根本是不可能的XDD。<br>這樣一次要寫快要 2 年的東西，根本不可能記得，反正忘記了一定是不重要的事情。</p><p>看看上一篇是怎麼寫的，照著格式來…</p><a id="more"></a><h2 id="發生的大事"><a href="#發生的大事" class="headerlink" title="發生的大事"></a>發生的大事</h2><p>人到大二後就會變懶…，連發生什麼事情都懶得知道了。<br>大二這年一下就過了，好像有得事情像是</p><ul><li>同性婚姻大法官釋憲</li><li>世大運</li><li>中國的企業被美國打著玩</li><li>有人好像偷偷稱帝了</li><li>比特幣漲到了 20000 美元，然後跌到剩 5000</li><li>之前記者被騙爆氣後，建中決定不再舉行放榜記者會</li><li>Oracle 拿著 Java 到處亂告人</li><li>Github 被微軟買下來了</li></ul><h2 id="我發生的事"><a href="#我發生的事" class="headerlink" title="我發生的事"></a>我發生的事</h2><ul><li>去 Google 台北玩了一個暑假</li><li>拿到了一件 CodeJam T-Shirt</li><li>想做四軸做不出來QQ</li><li>修課修得很火，被各種要求手算的資工必修稿得放棄希望</li><li>去越南打 ICPC，隊友在海關被搜出剪刀跟螺絲起子差點出不了國</li><li>遊戲人生電影版</li><li>各種工作，做得有點累了</li></ul><h2 id="Google-實習"><a href="#Google-實習" class="headerlink" title="Google 實習"></a>Google 實習</h2><p>過了一年了，今年又有很多朋友也去了。<br>Google 實習，一開始覺得很猛，現在想想也還好。<br>不是說很簡單或是什麼的，不過就是其實投了就有機會上的東西，沒有那麼遙不可及。</p><p>面試就是問一些簡單的演算法題目，應該主要是要考驗你的表達和溝通能力，過程就沒什麼特別的了。</p><p>實習遇到了很多老朋友，也認識了很多新朋友。整個實習的過程很完整的體會了在大公司工作的感覺，我覺得對我未來的規劃上滿有幫助的。同時也體驗了跟很多人一起開發，git 的技巧，跟外國人開會和討論，最大的改變，就是我開始使用 format 工具來幫助我 format 程式碼。好的 format 工具真的能讓 code 變好看，也省下你調整縮排和斷行的時間。</p><p>比較特別的，是 Google 吃的很好。不但有免費的餐廳，冰淇淋，偶爾還會有補助讓大家去外面的餐廳吃飯。這點基本上就是讓你感受到國力差距的時候了。</p><p>剛去的時候有很多的想法，不過過了一年後，突然要寫好像也沒什麼好寫的了，基本上還是很推薦沒有待過大公司的朋友有機會一定要試試看，對求職應該很有幫助。</p><h2 id="ICPC"><a href="#ICPC" class="headerlink" title="ICPC"></a>ICPC</h2><p>去越南打了 ICPC ，這是我第一次去東南亞國家，這裡讓人意外的沒什麼共產國家的感覺，應該說感覺不是獨裁國家xD。<br>認識了一些這邊的朋友，覺得他們在國際觀很好，同時還有像是它們也會看日本動畫之類的。<br>有些基礎建設不是那麼好，不過硬體設備該有得也是有，就是整體平均沒有那麼好。<br>比賽時發現他們的隊伍強到炸開，台灣人在繼續補習浪費時間練考古題以後一定被越南人打趴在地上。</p><h2 id="大學"><a href="#大學" class="headerlink" title="大學"></a>大學</h2><p>基本上大部分的課程都上的很火XD。<br>基本上已經看清好的課程在大學是可遇不可求的了。<br>要列舉大學的缺點，我覺得可以花幾千字來寫了。這段時間一直在經歷各種覺得不公平或很奇怪的事情，心境一直在改變。所以現在覺得也沒什麼好講得了，希望可以拿到畢業證書就好。<br>偶爾也有好的課程，不過好的成績又是另外一回事情了。</p><h2 id="動畫之類的"><a href="#動畫之類的" class="headerlink" title="動畫之類的"></a>動畫之類的</h2><p>這段時間出了一堆電影版動畫，像是什麼聲之形啊遊戲人生ZERO啊傷物語之類的。<br>感覺台灣人越來越宅了，現在這些放電影院也可以賣的出去了。</p><p>最近剛好把物語補完了，傷物語真的很爽，某種意義上來說，沒看過可以去看一下。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這段時間體驗了一些以前沒做過得事情，寫了很多東西，但是又意外的回頭看覺得什麼都沒做。<br>最近越來越有種做事力不從心的感覺，未來要做什麼工作要怎麼生活越來越迷惘了。<br>希望我以後翻開這篇的時候會有答案XD。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;忍&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/diary-2018-0711越來越不知道以後要做什麼/001.png&quot; title=&quot;Name(id=id)&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;超久沒寫了，事實證明固定更新根本是不可能的XDD。&lt;br&gt;這樣一次要寫快要 2 年的東西，根本不可能記得，反正忘記了一定是不重要的事情。&lt;/p&gt;
&lt;p&gt;看看上一篇是怎麼寫的，照著格式來…&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chino.taipei/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>ArchLinux 和 Gnome Shell 3 桌面環境安裝筆記</title>
    <link href="http://chino.taipei/note-2018-0324ArchLinux-%E5%92%8C-Gnome-Shell-3-%E6%A1%8C%E9%9D%A2%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/"/>
    <id>http://chino.taipei/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/</id>
    <published>2018-03-23T19:24:19.000Z</published>
    <updated>2018-10-11T05:49:49.750Z</updated>
    
    <content type="html"><![CDATA[<p>自從上次灌好 Archlinux 後其實我一直想要來寫一篇筆記，可是一直都沒有真的來寫。<br>結果過了一年，因為換電腦又重灌了一次，這次來把它寫下來。</p><p>這篇的重點會擺在如何安裝一個個人工作用的 Archlinux 環境，其實步驟意外的不難，當然是過程中不要出意外啦XD</p><p>Archlinux 好處是單純，乾淨，很容易了解並自己調整內容，也很適合拿來學習熟悉 Linux 系統。加上社群活躍，更新快速，拿來當開發環境也很適合，整體來說都是個值得試試看的系統。</p><p>灌好桌面大概長這樣：<br><img src="/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/screen.png" title="螢幕節圖"></p><a id="more"></a><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>首先提一下，如果是沒什麼灌過作業系統，或是沒有灌過 Linux 的人如果下定決心想要熟悉 Linux 無訪，但若只是要搞個 Linux 環境寫作業還是幹麻的，推薦還是去灌 Ubuntu 就好。<br>Archlinux 是給喜歡自己校調系統的人使用的（？</p><p>首先，灌系統還是要準備的有，東西是否都備份了，自己的硬體架構和驅動程式是不是可以被 Archlinux 支援等等的。不過通常都不會太慘啦？灌下去就知道了。<br>筆電通常問題比較多，因為硬體都是怪怪的硬體。聽說 Dell 的筆電的話會好一點，畢竟有原廠支援 Ubuntu 的樣子。其他的就看緣份吧？<br>如果你是從其他 Linux 重灌的，記得備份 ssh-key 和 bashrc 等等檔案。</p><h2 id="安裝-Archlinux"><a href="#安裝-Archlinux" class="headerlink" title="安裝 Archlinux"></a>安裝 Archlinux</h2><p>反正都看這邊 ： <a href="https://wiki.archlinux.org/index.php/installation_guide" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/installation_guide</a><br>這個步驟和大部分安裝過程類似，就先搞個 Archlinux 隨身碟，燒 Archlinux 的 ISO，接著用它開機等等的，接下來的步驟就照 Archlinux 官網的安裝教學。<br>燒隨身碟主要好像有兩家軟體，有時候用某一家燒會開不了機就換一家的試試看，不同電腦好像也有不同的狀況。<br>Archlinux 是用指令一步一步完成安裝的，包括分割硬碟，mount，安裝 OS 基本套件等等可能會嚇到很多新手，不過其實也就那樣而已。</p><p>關於分割硬碟，基本上因為是自己個人使用，割一個 / 磁區跟 swap 磁區就好。如果是 SSD 的話就不要 Swap 了太傷 SSD 了。</p><p>我灌兩次大概遇過幾個問題：</p><h3 id="Sercurity-Boot"><a href="#Sercurity-Boot" class="headerlink" title="Sercurity Boot"></a>Sercurity Boot</h3><p>這東西記得關掉，他是用來驗證你的 OS 是不是某些受信任的廠商(只有 Windows ??) 發行的，Linux 嘛，反正也不可能有人幫它簽，自己簽也沒什麼意義，所以直接關掉就好。</p><h3 id="Grub2-Efi"><a href="#Grub2-Efi" class="headerlink" title="Grub2 Efi"></a>Grub2 Efi</h3><p>如果從舊的 BIOS MBR 開機方式轉過來的人可能不了解 UEFI 開機模式。其實很簡單，灌電腦的時候多割一個 EFI 磁區，然後照著 <a href="https://wiki.archlinux.org/index.php/GRUB" target="_blank" rel="noopener">Archlinux Grub</a> 文件上關於 UEFI 的步驟安裝 Grub 就可以了。<br>基本概念就是，現在 UEFI 系統會去硬碟裡搜尋 EFI 磁區，從裡面找開機檔來開機，很方便，可以跟 Windows 的 EFI 磁區分開達成雙重開機又不怕被 Windows 蓋回去了。<br>如果你是用蓋掉 Windows 的 EFI 磁區的方式安裝的要小心 Windows 把他的 EFI 磁區自動修復又搞回去。<br>如果不小心搞壞了 Windows 的 EFI 去網路上找 Windows 的指令修復就可以了。</p><h3 id="Dell-eps-EFI-boot-bootx64-efi"><a href="#Dell-eps-EFI-boot-bootx64-efi" class="headerlink" title="Dell eps/EFI/boot/bootx64.efi"></a>Dell eps/EFI/boot/bootx64.efi</h3><p>這個最雷了…。想說怎麼 Grub 灌好了卻開不了，結果 Dell 會去檢查你的 eps/EFI/boot/bootx64.efi 這個檔案在不在…。基本上跟你的grub 的 .efi 檔同一層目錄下，新增一個 bootx64.efi 的檔案，就可以動了…。</p><p>其他相關問題就去逛逛 Archlinux wiki 吧？</p><h2 id="套件安裝"><a href="#套件安裝" class="headerlink" title="套件安裝"></a>套件安裝</h2><p>這裡寫幾個我安裝的套件：</p><ul><li>openssh vim sudo<br>這三個就不解釋了，反正會用到，vim 可能安裝系統的時候就會裝了，因為會去條設定檔XDsudo 的話就是先加個使用者當作平常自己用的使用者然後去設定下。</li><li>base-devel git yaourt (更新：yaourt 已經被棄用了，請改成 yay 之類的套件)<br>base-devel 包含所有用來 build 套件的相關工具，也有 gcc g++ 等等，git 就 git。前面兩個是 yaourt 不可或缺的套件。<br>yaourt 是一個跟包裝 pacman 的套件管理程式，讓你可以像裝官方套件庫一樣安裝 AUR(Arch User Repository) 上的套件，讓你可以輕鬆安裝各種有的沒的，不然你本來要裝可能要自己 git clone 然後自己編譯再安裝，yaourt 就是幫你做這件事情。裝好之後，以後的 pacman 都用 yaourt 指令取代就可以了。不過 yaourt 本身也在 AUR 上，有兩種裝法，一種是暫時加入法國(?)的某個 arch 套件庫到 pacman，或是體驗一次原汁原味的 AUR 套件安裝，詳細網路上資料很多。</li></ul><p><strong>更新</strong> ：yaourt 已經被棄用了，請改用其他的 aur helper ，我個人現在是用 yay 取代 yaourt 。參考：<a href="https://wiki.archlinux.org/index.php/AUR_helpers" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/AUR_helpers</a></p><ul><li>gnome-shell gdm(gdm-plymouth)<br>如果你想要有桌面系統（個人電腦用純文字界面也是滿難用的），那 gnome-shell 是個好選擇，漂亮美觀，整體 UI 設計我覺的很好，有很多漂亮主題可以套用。如果你想用別的，也沒差？後面解釋細節。</li><li>chinese-font chinese-input-method(ibus-chewing)(ibus-athiy)(run ibus-setup)<br>記得要裝個中文字體，不然會顯示不了中文！！其他語言也是要記得裝字體。字體的話就自己選一個喜歡的就好。<br>至於中文輸入法就是個大坑，gnome-shell 預設跟 ibus 結合，我灌不起來其他的又覺得ibus 還可以用，就用了XD</li><li>sakura(Terminal)<br>因為新版的 gnome-terminal 移除了背景半透明的功能，為了有跟以前一樣的使用體驗，就發現了這個還不錯的 terminal，雖然預設很醜，不過套用設定檔之後就變得很漂亮了。可以參考我的<a href="https://github.com/samsam2310/weirc/blob/master/conf/sakura.conf" target="_blank" rel="noopener">設定檔</a>，記得放到 ~/.config/sakura/ 下面。</li><li>google-chrome sublime-text-dev<br>這兩個沒意外要用 ARU 裝，有 yaourt 就直接 yaourt -S 就好了。就 Chrome 跟 Sublime Text 3 ，如果要裝 FF 什麼的請自便 （？</li><li>zram(systemd-swap.service)<br>如果你的電腦只有 SSD ，那可能不會割 swap ，這時候可以使用 zram ，透過壓縮記憶體製造 swap 的效果，基本上可以達到 ram + swap == 3 * ram 大小的效果 ，還滿厲害的。詳細設定可以看<a href="https://wiki.archlinux.org/index.php/Improving_performance#Zram_or_zswap" target="_blank" rel="noopener">這裡</a>，不過其實灌 systemd-swap 這個套件後去設定檔打開然後 systemctl enable 這個服務就好。</li></ul><h2 id="Gnome-Shell-設定"><a href="#Gnome-Shell-設定" class="headerlink" title="Gnome-Shell 設定"></a>Gnome-Shell 設定</h2><h3 id="基本安裝"><a href="#基本安裝" class="headerlink" title="基本安裝"></a>基本安裝</h3><p>安裝方法很簡單，直接用 pacman 或 yaourt 裝就好了，裝好 gnome-shell 後要再裝一個桌面管理程式（可以想成登入畫面），我是裝了 gdm，它會負責登入和幫你啟動 gnome-shell。<br>基本上裝好後用 systemctl enable gdm 就可以了，沒有什麼特別會遇到的問題。</p><h3 id="主題相關"><a href="#主題相關" class="headerlink" title="主題相關"></a>主題相關</h3><p>接下來就是安裝 gnome-tweak-tool 這個方便的工具，可以用來調整大部分的 gnome-shell 主題相關的設定。接下來就是去網路上找喜歡的主題套用，我使用了 gnome-arc-dark 和 paper-icons-theme-git 這兩個主題，其中後者是 icon-set ，提供好看的應用程式 logo，蠻意外的是它連 chrome sublime 等等的 icon 都有包含。裝好後，去 gnome-tweak-tool 選擇套用。</p><p>另外可以裝一些 gnome-shell 的插件，要裝插件用 gnome-shell 預設付的網頁瀏覽器去瀏覽插件網站的話可以用滑鼠點一下 ON 就裝好很方便，Chrome 還是其他瀏覽器理論上也要可以，不過還要條設定什麼的，我是覺得直接用內建的瀏覽器充當插件管理員也不錯xD。<br>我裝了 dash-to-dock 和 BackSlide 兩個插件。前者是讓你可以把工具列做些調整，比如像 mac 一樣換到下面和一些很好用的功能。後者是可以自動定時換桌布。</p><p>背景圖片上至桌布下至 Grub 選單都可以簡單換成自己喜歡的圖片，就只有 GDM 的密碼輸入畫面比較麻煩一點，可以參考 <a href="https://wiki.archlinux.org/index.php/GDM#Log-in_screen_background_image" target="_blank" rel="noopener">Arch Wiki</a>的說明去修改，需要改設定檔並重新產生一些 binary 檔案。</p><p>Sakura terminal<br><img src="/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/screen2.png" title="螢幕節圖"></p><p>GDM 輸入密碼畫面<br><img src="/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/screen3.png" title="螢幕節圖"></p><p>螢幕鎖定畫面<br><img src="/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/screen4.png" title="螢幕節圖"></p><h3 id="中文輸入法"><a href="#中文輸入法" class="headerlink" title="中文輸入法"></a>中文輸入法</h3><p>中文輸入法一直是個痛苦的東西。gnone-shell 3 開始決定整合 ibus 變成一體的輸入法，所以也不建議使用其他輸入法了，因為整合後滿漂亮的，也比較好灌。<br>除了 ibus 本體外，我選擇了 ibus-chewing 和 ibus-athiy 分別用來輸入中文和日文，如果有其他喜歡的也可以選。選好後，不要照一些以前的怪方法啟用它們，而是去”設定” 中的 “地區和語言” 調整，建議灌完重開機一次最保險，反正我從來沒搞懂怎麼好好裝輸入法…。</p><p>接下來記得裝中文字體，要注意的是裝完記得要清除字體 cache 不然會看不到改變（然後你就會覺的怎麼跟原本的一樣醜XDD）。通常都是選 CJK 一整包的字體，日文韓文都會一次包含到，其他字體就照需要安裝就好。</p><h3 id="Plymouth"><a href="#Plymouth" class="headerlink" title="Plymouth"></a>Plymouth</h3><p>如果你想要像 Ubuntu 一樣有漂亮的開機動畫，可以灌 Plymouth 這個套件，可以參考 <a href="https://wiki.archlinux.org/index.php/plymouth" target="_blank" rel="noopener">Arch Wiki</a>。<br>基本上就是灌好，改一改 /etc/mkinitcpio.conf 然後重新 mkinitcpio -p linux。<br>另外，為了讓開機動畫可以順順的接上 GDM ，可以把 gdm 換成 gdm-plymouth ，先刪掉 gdm 再重裝 gdm-plymouth 並且記得 enable。</p><p>接著可以用 plymouth-set-default-theme -l 看有哪些主題可以換，並且用其他參數換成那個主題。主題可以去網路上找，也可以自己改，還滿簡單的。<br>可以用以下指令測試，tty 可以自己改成空的 tty。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plymouthd --tty=tty5 --debug --mode=boot</span><br><span class="line">plymouth --show-splash</span><br><span class="line">sleep 5</span><br><span class="line">plymouth --quit</span><br></pre></td></tr></table></figure><p>通常這些步驟可能會遇到一些問題，基本上就慢慢摸索就好了。</p><h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>最後就是安裝一些自己會用到的東西，tweak-tool 可以調的設定滿多的可以摸索一下，比如可以把快速鍵 ctrl+shift+t 設定成 sakura terminal 等等。<br>目前用起來整體覺得很滿意，界面很漂亮，可以按照自己的意思調整，加上 gnome-shell 對整體的使用者體驗設計上還算不錯。<br>缺點大概就是目前 gnome-shel l 記憶體吃很兇，幾乎可以確定是 Bug 了但是官方卻遲遲無法解決，只能期待哪天被修復了。</p><p>大概就這樣，希望如果有人跟我一樣不想使用跟 WIndows 差不多也只是下一步下一步安裝沒什麼自由空間的 Ubuntu 的話，可以試試看 Archlinux 喔！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自從上次灌好 Archlinux 後其實我一直想要來寫一篇筆記，可是一直都沒有真的來寫。&lt;br&gt;結果過了一年，因為換電腦又重灌了一次，這次來把它寫下來。&lt;/p&gt;
&lt;p&gt;這篇的重點會擺在如何安裝一個個人工作用的 Archlinux 環境，其實步驟意外的不難，當然是過程中不要出意外啦XD&lt;/p&gt;
&lt;p&gt;Archlinux 好處是單純，乾淨，很容易了解並自己調整內容，也很適合拿來學習熟悉 Linux 系統。加上社群活躍，更新快速，拿來當開發環境也很適合，整體來說都是個值得試試看的系統。&lt;/p&gt;
&lt;p&gt;灌好桌面大概長這樣：&lt;br&gt;&lt;img src=&quot;/note-2018-0324ArchLinux-和-Gnome-Shell-3-桌面環境安裝筆記/screen.png&quot; title=&quot;螢幕節圖&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://chino.taipei/categories/Note/"/>
    
    
      <category term="Linux" scheme="http://chino.taipei/tags/Linux/"/>
    
      <category term="Archlinux" scheme="http://chino.taipei/tags/Archlinux/"/>
    
      <category term="Gnome-Shell" scheme="http://chino.taipei/tags/Gnome-Shell/"/>
    
      <category term="Plymouth" scheme="http://chino.taipei/tags/Plymouth/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm::Suffix Array 後綴數組</title>
    <link href="http://chino.taipei/code-2017-0209Algorithm-Suffix-Array-%E5%BE%8C%E7%B6%B4%E6%95%B8%E7%B5%84/"/>
    <id>http://chino.taipei/code-2017-0209Algorithm-Suffix-Array-後綴數組/</id>
    <published>2017-02-09T08:18:44.000Z</published>
    <updated>2018-03-23T19:15:08.171Z</updated>
    
    <content type="html"><![CDATA[<p>這次去了 IOICamp，從第一次看到到現在過了這麼久，終於學會 Suffix Array 了QAQ。<br>大概把理解的過程寫下來。</p><a id="more"></a><p>在處理字串問題的時候，我們常常需要處理一些跟子字串啦、匹配字串等等的問題，當我們需要拿一些東西對一個大字串(約10^5)做一些事情的時候，Suffix Array也就是後綴數組也許就可以幫我們做到。</p><p>所謂的後綴數組就是，我們把一個字串的所有的後綴拿去排序，然後紀錄一些數值。比如字串”ababa”變成後綴數組就是：</p><table><thead><tr><th>Rank</th><th>SA</th><th>Hei</th><th>Suffix</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>ababa</td></tr><tr><td>1</td><td>2</td><td>3</td><td>aba</td></tr><tr><td>2</td><td>4</td><td>1</td><td>a</td></tr><tr><td>3</td><td>1</td><td>0</td><td>baba</td></tr><tr><td>4</td><td>3</td><td>2</td><td>ba</td></tr></tbody></table><p>實際上我們只會做出前面的 Suffix Array(以下簡稱 SA(x) )，而不會真的把子字串做出來拿去排序。<br>做成這樣的好處就是我們可以利用它進行二分搜等等的操作，因為每個後綴的前綴就是一個子字串，我們就像是可以對所有的子字串進行二分搜，當然還要搭配一些東西來輔助，像是 Hei(x)，代表每個子字串和它排名前一名的人，前面有多少字元是相等的，搭配這個資訊就可以作到一些事情，當然也可以真對不同題目去找不同的值。</p><p>要如何找到一個 SA(x) 呢？<br>我們要利用一種特別的找法，也就是倍增法。<br>當然可以直接用 std::sort 來排序，但是字串的比較是 O(n) 有點糟糕，但我們發現因為其實後綴原本是同一個字串，比較的時候我們可以省下一些時間，利用其他人比較後的結果來排序。</p><p>首先我們先定義兩個必要的東西， 一個就是 y = SA(x) 代表第 x 名的後綴實際上是從 y 開始的後綴; 另外一個就是 x = RA(y) 代表 y 開始的後綴是第 x 名。<br>很容易可以發現他們是反函數關係(x = RA(S(x)) )。<br>然後我們利用 radix sort 的概念，也就是排序字串的時候先比較第一個字元，照著排好序之後，分成很多組，針對第一個字元一樣的人，再對第二個字元排序…。<br>這時我們可以發現一個性質就是，一個 i 到 i+2<em>K 的子字串和 j 到 j+2</em>K 的子字串，想知道它的大小關係，可以透過比較到 i+K 和 j+K 的子字串，如果一樣，再去比較 i+K 到 i+2<em>K 和 j+K 到 j+2</em>K 的子字串，反正就是拆成兩塊啦！<br>我們又知道我們後面的字串已經排好序了，我們就可以利用他們一層一層推出來！</p><p>看看這段程式碼：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_suffix_array</span><span class="params">(<span class="keyword">int</span>*SA, <span class="keyword">int</span>*RA, <span class="keyword">char</span>*S, <span class="keyword">bool</span> is_dec=<span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> RA2[N];</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    copy_n(S,n,RA);</span><br><span class="line">    <span class="keyword">int</span> n_of_diff_rank = <span class="number">256</span>; <span class="comment">// char has 256 different value.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;n; k*=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">// Comput SA_&#123;2k&#125; with RA_&#123;k&#125;</span></span><br><span class="line">        <span class="comment">// sort by rank-k ( ignore the string which len &lt; 1+k )</span></span><br><span class="line">        <span class="keyword">if</span>(is_dec)&#123; <span class="comment">// "aa" &lt; "a"</span></span><br><span class="line">            iota(SA, SA+n, <span class="number">0</span>); <span class="comment">// init SA to [0,1,2...]</span></span><br><span class="line">            radix_sort(SA, SA+n-k, RA+k, n_of_diff_rank);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// "a" &lt; "aa"</span></span><br><span class="line">            iota(SA,SA+k,n-k);</span><br><span class="line">            iota(SA+k,SA+n,<span class="number">0</span>); <span class="comment">// init SA to [k,k+1...n-1,0,1,...]</span></span><br><span class="line">            radix_sort(SA+k, SA+n, RA+k, n_of_diff_rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort by rank-0 ( include the string which len &lt; 1+k )</span></span><br><span class="line">        radix_sort(SA, SA+n, RA, n_of_diff_rank);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Comput RA_&#123;2k&#125; with SA_&#123;2k&#125;</span></span><br><span class="line">        RA2[SA[<span class="number">0</span>]] = <span class="number">0</span>; n_of_diff_rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(noteq(SA[i<span class="number">-1</span>], SA[i], k, n, RA) )</span><br><span class="line">                n_of_diff_rank++;</span><br><span class="line">            RA2[SA[i]] = n_of_diff_rank<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        copy_n(RA2, n, RA);</span><br><span class="line">        <span class="keyword">if</span>(n_of_diff_rank == n)<span class="keyword">break</span>; <span class="comment">// all rank are diff =&gt; SA is fully sorted</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把字串的值直接複製到 RA 裡，當作一開始的大小關係的依據，RA 裡面就是紀錄 i 這個位置的後綴是第幾名，一開始有很多重複的值(重複的字母)，經過多次的排序，我們的目標就是讓它變成 0 到 N-1 全部都不一樣的排名！利用這些排名，就可以把 SA(x) 給排序好！！</p><p>首先先照字串的第二段的值去排序 SA(x) ，如果有長度不夠的字串(也就是位置再 n-k 之後的後綴)，就當作它沒有第二段，我們可以先放到旁邊不理它。要照第二段排序只要排序 i 的時候參考 RA(i+K) 就可以照第二段排序了！<br>因為我這裡的範例用的sort是穩定排序，可以透過把長度不夠的字串放到 SA 前面或是 SA 後面決定不夠長的位置要再 a 前面還是在 z 後面(最上面表格裡的例子就是放在後面的，ababa 然後 aba)，不過基本上沒差啦，除非題目有特殊性質要用。</p><p>再來第二步就是再照字串第一段的值去排序，要作到這樣就是比較 i 的時候用 RA(i) 去比較就可以了。</p><p>到這裡我們已經把依照 K 做出的 SA-2K 做出來了(依照前 2<em>K 個字元排序的 SA ，依此類推也有 RA-2K)，再來就是用它來更新 RA 讓它也變成 RA-2K ，作法就是先把「名次」設成 1 ，然後從第0名開始看，如果這一個名次跟上一個名次是一樣的( 用上面那種切兩段比較法來比較 )，那這個人就跟它前一個人並列第 x 名，做完之後我們就得到依照 2</em>K 的 RA-2K 了。</p><p>最後，如果名次已經跟 n 一樣多了那代表已經可以排序所有後綴了，不然就把 K 變成兩倍，如果長度超過 n 那代表也不用繼續了，如果都不是那就從第一步重來。</p><p>另外比較有趣的是這段 radix sort：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span>*bg, <span class="keyword">int</span>*ed, <span class="keyword">int</span>*rank, <span class="keyword">int</span> n_of_diff_rank)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> box[N], tmp[N];</span><br><span class="line">    <span class="keyword">int</span> n = ed-bg;</span><br><span class="line">    fill_n(box, n_of_diff_rank, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        box[rank[i] ]++;</span><br><span class="line">    partial_sum(box, box+n_of_diff_rank, box);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        tmp[--box[rank[bg[i]] ]] = bg[i];</span><br><span class="line">    copy_n(tmp,n,bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把會有的不同的值的範圍先初始化好，然後用 partial_sum 轉成前綴和！！！最後用倒序的順序把東西填回去，這樣就可以作到穩定的排序，蒸的很蚌！</p><p>最後就是怎麼做出 hei 數組，單純的做的話就是跟前一個人比較，算出有幾個一樣，當然這樣很慢。<br>有一個性質是，AAB 和它前面一個位置 BAAB ，你可以看到它只往前多一個 B 而已，所以你前面一名和它前面一名你可以大膽的猜，要不是他的 hei 往前多 1 ， 要不然就是它跟它比的人前面多的不一樣變成 0 ，反正它最多 1 所以你的 hei 就是大於等於他的 hei -1 ！！！<br>所以你只要照著位置順序做，每次做下個位置的時候只要從上一個 hei -1 開始找就好，這樣複雜度就是字串最長 n + 每次下一個位置長度最多減一就是好好的 O(2*n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_hei</span><span class="params">(<span class="keyword">int</span>*SA, <span class="keyword">int</span>*RA, <span class="keyword">char</span>*S, <span class="keyword">int</span>*Hei)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(RA[i])&#123;</span><br><span class="line">            <span class="keyword">while</span>(S[i+k]==S[SA[RA[i]<span class="number">-1</span>]+k])k++;</span><br><span class="line">        &#125;</span><br><span class="line">        Hei[RA[i]] = k;</span><br><span class="line">        k = max(<span class="number">0</span>,k<span class="number">-1</span>); <span class="comment">// hei(rank(i+1) ) &gt;= hei(rand(i) )-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後說個簡單的例題，比如要你求一個字串的不相等的子字串有幾個？<br>作法就是把 SA 求出來之後做 Hei ，然後所有子字串的可能個數扣掉 Hei 的總和(剛好就是重複的子字串數)。</p><p>下面就是完整的程式碼。<br>實做上可以再壓一點變數之類的，不過為了寫清楚就這樣寫了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug_suffix</span><span class="params">(<span class="keyword">int</span> *SA, <span class="keyword">int</span> *RA, <span class="keyword">int</span> *Hei, <span class="keyword">char</span> *S, <span class="keyword">const</span> <span class="keyword">char</span>*s=<span class="string">"suffix array:"</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"SA Hei:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cout</span>&lt;&lt;SA[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;Hei[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;setw(n)&lt;&lt;(S+SA[i])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"RA:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cout</span>&lt;&lt;RA[i]&lt;&lt;<span class="string">' '</span>&lt;&lt;setw(n)&lt;&lt;(S+i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-------"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">noteq</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span>*RA)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RA[a] != RA[b] || a+k&gt;=n || b+k&gt;=n || RA[a+k] != RA[b+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span>*bg, <span class="keyword">int</span>*ed, <span class="keyword">int</span>*rank, <span class="keyword">int</span> n_of_diff_rank)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> box[N], tmp[N];</span><br><span class="line">    <span class="keyword">int</span> n = ed-bg;</span><br><span class="line">    fill_n(box, n_of_diff_rank, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        box[rank[i] ]++;</span><br><span class="line">    partial_sum(box, box+n_of_diff_rank, box);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        tmp[--box[rank[bg[i]] ]] = bg[i];</span><br><span class="line">    copy_n(tmp,n,bg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_suffix_array</span><span class="params">(<span class="keyword">int</span>*SA, <span class="keyword">int</span>*RA, <span class="keyword">char</span>*S, <span class="keyword">bool</span> is_dec=<span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> RA2[N];</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    copy_n(S,n,RA);</span><br><span class="line">    <span class="keyword">int</span> n_of_diff_rank = <span class="number">256</span>; <span class="comment">// char has 256 different value.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;n; k*=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">// Comput SA_&#123;2k&#125; with RA_&#123;k&#125;</span></span><br><span class="line">        <span class="comment">// sort by rank-k ( ignore the string which len &lt; 1+k )</span></span><br><span class="line">        <span class="keyword">if</span>(is_dec)&#123; <span class="comment">// "aa" &lt; "a"</span></span><br><span class="line">            iota(SA, SA+n, <span class="number">0</span>); <span class="comment">// init SA to [0,1,2...]</span></span><br><span class="line">            radix_sort(SA, SA+n-k, RA+k, n_of_diff_rank);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// "a" &lt; "aa"</span></span><br><span class="line">            iota(SA,SA+k,n-k);</span><br><span class="line">            iota(SA+k,SA+n,<span class="number">0</span>); <span class="comment">// init SA to [k,k+1...n-1,0,1,...]</span></span><br><span class="line">            radix_sort(SA+k, SA+n, RA+k, n_of_diff_rank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sort by rank-0 ( include the string which len &lt; 1+k )</span></span><br><span class="line">        radix_sort(SA, SA+n, RA, n_of_diff_rank);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Comput RA_&#123;2k&#125; with SA_&#123;2k&#125;</span></span><br><span class="line">        RA2[SA[<span class="number">0</span>]] = <span class="number">0</span>; n_of_diff_rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(noteq(SA[i<span class="number">-1</span>], SA[i], k, n, RA) )</span><br><span class="line">                n_of_diff_rank++;</span><br><span class="line">            RA2[SA[i]] = n_of_diff_rank<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        copy_n(RA2, n, RA);</span><br><span class="line">        <span class="keyword">if</span>(n_of_diff_rank == n)<span class="keyword">break</span>; <span class="comment">// all rank are diff =&gt; SA is fully sorted</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_hei</span><span class="params">(<span class="keyword">int</span>*SA, <span class="keyword">int</span>*RA, <span class="keyword">char</span>*S, <span class="keyword">int</span>*Hei)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, n = <span class="built_in">strlen</span>(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(RA[i])&#123;</span><br><span class="line">            <span class="keyword">while</span>(S[i+k]==S[SA[RA[i]<span class="number">-1</span>]+k])k++;</span><br><span class="line">        &#125;</span><br><span class="line">        Hei[RA[i]] = k;</span><br><span class="line">        k = max(<span class="number">0</span>,k<span class="number">-1</span>); <span class="comment">// hei(rank(i+1) ) &gt;= hei(rand(i) )-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> S[N];</span><br><span class="line"><span class="keyword">int</span> SA[N], RA[N], Hei[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;S;</span><br><span class="line">        build_suffix_array(SA,RA,S,<span class="literal">true</span>);</span><br><span class="line">        build_hei(SA,RA,S,Hei);</span><br><span class="line">        debug_suffix(SA,RA,Hei,S,<span class="string">"Suffix Array(DES)"</span>);</span><br><span class="line">        build_suffix_array(SA,RA,S,<span class="literal">false</span>);</span><br><span class="line">        build_hei(SA,RA,S,Hei);</span><br><span class="line">        debug_suffix(SA,RA,Hei,S,<span class="string">"Suffix Array(AES)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次去了 IOICamp，從第一次看到到現在過了這麼久，終於學會 Suffix Array 了QAQ。&lt;br&gt;大概把理解的過程寫下來。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="String" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/String/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="Algorithm" scheme="http://chino.taipei/tags/Algorithm/"/>
    
      <category term="IOICamp" scheme="http://chino.taipei/tags/IOICamp/"/>
    
  </entry>
  
  <entry>
    <title>IOICamp::導遊讚哥讚！</title>
    <link href="http://chino.taipei/code-2017-0208IOICamp-%E5%B0%8E%E9%81%8A%E8%AE%9A%E5%93%A5%E8%AE%9A%EF%BC%81/"/>
    <id>http://chino.taipei/code-2017-0208IOICamp-導遊讚哥讚！/</id>
    <published>2017-02-08T07:06:17.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p>IOICamp 2017，遇到的題目，應該也算是經典題。<br>給你一顆樹，會有人在上面移動，問你所有人到1號人的距離總和。<br>因為IOICamp Judge不公開就不放連結了。</p><a id="more"></a><p>題目其實就是這類題目的經典題「黑白點塗色」。<br>給你一顆樹，會把某些點塗成黑色或白色，問你所有黑點到某個點的距離和。<br>只要把所有人當作黑點，編號1的人特別處理。<br>紀錄所有人的位置，每次有人移動就把某個黑點刪掉然後再加回去，之後用編號1的人的位置去查詢答案就可以了，要注意每個點可能可以被塗黑很多次（或是說插入一個黑點可能比較貼切？）。<br>作法就是<a href="/code-2016-0412TIOJ-ZJOI-1844-%E5%B9%BB%E6%83%B3%E4%B9%A1%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/">分治樹</a>，也就是把樹分治的過程紀錄變成一顆樹的特別的資料結構。</p><p>雖然寫過了但是又忘記了QAQ。</p><p>分治樹的作法沒有很特別，重點是在怎麼處裡資料。<br>我覺的樹分治的關鍵就是 <strong>樹深度只有lgN</strong> 這點，所以利用這點進行更新和查詢就可以保證複雜度是好的。<br>以這題來說，對於每個分治樹上的點，我紀錄他們底下的黑點數量和到他們的父親的距離和，以及每個小孩的黑點數和和距離和。<br>有了這幾個資訊，每次我們想知道所有黑點到一個點的距離和，就可以用那些資訊推出來。當然這還要配合一些預處理的資訊像是每個點到他的「深度dep的祖先」的距離等等。</p><p>細節就在程式碼裡了。<br>比較有意思的事情是，我發現除了傳一個 reference 進去之外，用一個 static 變數也可以讓你在遞迴函數需要回傳多個資訊但是其實外面不需要的時候，讓code簡潔一點。<br>比如這裡找重心的 find_hr 函數，子樹的節點樹這個資訊就用了 tsz 這個變數來存，在函數return後馬上用另外一個變數接起來，而 sz 這個變數只有在 init = true 的時候初始化。<br>這樣子改的結果就是外面使用的時候只需要傳一個點，拿回來一個重心，也不需要額外的全域變數和reference就可以找重心了，跟之前的版本相比簡潔很多。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">1</span>, lgN = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PIL;</span><br><span class="line"><span class="built_in">vector</span>&lt;PIL&gt; G[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">htree</span>&#123;</span></span><br><span class="line">    htree *fa;</span><br><span class="line">    <span class="keyword">int</span> sz, dep;</span><br><span class="line">    PIL tofa, fromch;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> DIS[lgN];</span><br><span class="line">    htree():fa(<span class="literal">NULL</span>),sz(<span class="number">0</span>),dep(<span class="number">0</span>),tofa(<span class="number">0</span>,<span class="number">0</span>),fromch(<span class="number">0</span>,<span class="number">0</span>)&#123; &#125;</span><br><span class="line">&#125;HT[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> no=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(PIL v:G[now])<span class="keyword">if</span>(v.first != no &amp;&amp; !vis[v.first])&#123;</span><br><span class="line">        cnt += count(v.first,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_hr</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> no=<span class="number">-1</span>, <span class="keyword">bool</span> init=<span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sz, tsz;</span><br><span class="line">    <span class="keyword">if</span>(init)sz = count(now,no);</span><br><span class="line">    <span class="keyword">int</span> tmx = <span class="number">0</span>, tsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(PIL v:G[now])<span class="keyword">if</span>(v.first != no &amp;&amp; !vis[v.first])&#123;</span><br><span class="line">        <span class="keyword">int</span> hr = find_hr(v.first, now, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(hr != <span class="number">-1</span>)<span class="keyword">return</span> hr;</span><br><span class="line">        tsum += tsz;</span><br><span class="line">        tmx = max(tmx, tsz);</span><br><span class="line">    &#125;</span><br><span class="line">    tmx = max(tmx, sz-tsum<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(tmx &lt;= sz/<span class="number">2</span>)<span class="keyword">return</span> now;</span><br><span class="line">    tsz = tsum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_dep</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> no,<span class="keyword">int</span> dep,<span class="keyword">long</span> <span class="keyword">long</span> dis)</span></span>&#123;</span><br><span class="line">    HT[now].DIS[dep] = dis;</span><br><span class="line">    <span class="keyword">for</span>(PIL v:G[now])<span class="keyword">if</span>(v.first != no &amp;&amp; !vis[v.first])&#123;</span><br><span class="line">        build_dep(v.first, now, dep, dis+v.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build_ht</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> dep=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;"build_ht "&lt;&lt;now&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> hr = find_hr(now);</span><br><span class="line">    vis[hr] = <span class="number">1</span>;</span><br><span class="line">    HT[hr].dep = dep;</span><br><span class="line">    build_dep(hr,<span class="number">-1</span>,dep,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(PIL v:G[hr])<span class="keyword">if</span>(!vis[v.first])&#123;</span><br><span class="line">        <span class="keyword">int</span> ch = build_ht(v.first, dep+<span class="number">1</span>);</span><br><span class="line">        HT[ch].fa = HT+hr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_ht</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    htree *ht = &amp;HT[now];</span><br><span class="line">    <span class="keyword">int</span> dep = ht-&gt;dep;</span><br><span class="line">    ht-&gt;sz += u;</span><br><span class="line">    <span class="keyword">while</span>(dep--)&#123;</span><br><span class="line">        ht-&gt;tofa.first += u;</span><br><span class="line">        ht-&gt;tofa.second += u*HT[now].DIS[dep];</span><br><span class="line">        ht = ht-&gt;fa;</span><br><span class="line">        ht-&gt;fromch.first += u;</span><br><span class="line">        ht-&gt;fromch.second += u*HT[now].DIS[dep];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_ht</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    htree *ht = &amp;HT[now];</span><br><span class="line">    <span class="keyword">int</span> dep = ht-&gt;dep;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = HT[now].fromch.second;</span><br><span class="line">    <span class="keyword">while</span>(dep--)&#123;</span><br><span class="line">        htree *fa = ht-&gt;fa;</span><br><span class="line">        res += fa-&gt;fromch.second;</span><br><span class="line">        res -= ht-&gt;tofa.second;</span><br><span class="line">        res += (fa-&gt;fromch.first + fa-&gt;sz - ht-&gt;tofa.first)*HT[now].DIS[dep];</span><br><span class="line">        ht = fa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m,k,a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        fill(HT,HT+N,htree());</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        fill(G,G+N,<span class="built_in">vector</span>&lt;PIL&gt;());</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">        F(n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            a--;b--;</span><br><span class="line">            G[a].push_back(PIL(b,c));</span><br><span class="line">            G[b].push_back(PIL(a,c));</span><br><span class="line">        &#125;</span><br><span class="line">        build_ht(<span class="number">0</span>);</span><br><span class="line">        update_ht(<span class="number">0</span>,m<span class="number">-1</span>);</span><br><span class="line">        F(k)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            a--;b--;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line">                pos[<span class="number">0</span>] = b;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                update_ht(pos[a],<span class="number">-1</span>);</span><br><span class="line">                pos[a] = b;</span><br><span class="line">                update_ht(pos[a],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;query_ht(pos[<span class="number">0</span>])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IOICamp 2017，遇到的題目，應該也算是經典題。&lt;br&gt;給你一顆樹，會有人在上面移動，問你所有人到1號人的距離總和。&lt;br&gt;因為IOICamp Judge不公開就不放連結了。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Divide &amp; Conquer" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Divide-Conquer/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="Tree" scheme="http://chino.taipei/tags/Tree/"/>
    
      <category term="IOICamp" scheme="http://chino.taipei/tags/IOICamp/"/>
    
  </entry>
  
  <entry>
    <title>上大學整天在耍廢...</title>
    <link href="http://chino.taipei/diary-2016-1205%E4%B8%8A%E5%A4%A7%E5%AD%B8%E6%95%B4%E5%A4%A9%E5%9C%A8%E8%80%8D%E5%BB%A2/"/>
    <id>http://chino.taipei/diary-2016-1205上大學整天在耍廢/</id>
    <published>2016-12-04T22:02:05.000Z</published>
    <updated>2018-03-23T19:15:08.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="//www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=60056756">レム</a><br><img src="/diary-2016-1205上大學整天在耍廢/001.jpg" title="レム(id=60056756)"></p></blockquote><hr><p>日記寫成月記了XDD~~<br>嘛，至少我還記得寫…</p><p>大學第一個學期過了超過一半了，發生了一些事情。</p><a id="more"></a><h2 id="發生了一些大事"><a href="#發生了一些大事" class="headerlink" title="發生了一些大事?!"></a>發生了一些大事?!</h2><p>9月到現在好像發生了一些有趣的事情，想的到的大概就是：</p><ul><li>川普選上總統了XDD</li><li>復興航空倒了QAQ</li><li>婚姻平權法案的一些討論和一些護家盟們好笑的邏輯</li><li>好像有一個建中學弟跳樓了(既然是讀書考試的犧牲者，我們就在這裡弔念一下，雖然我不認識他)</li></ul><p>發生了一些讓人意外的事情，還有一些讓人難過的事情，不過因為我是個耍廢的大學生只會寫作業跟耍廢，所以懶得多做評論了QAQ。</p><h2 id="身邊發生的大事"><a href="#身邊發生的大事" class="headerlink" title="身邊發生的大事?!"></a>身邊發生的大事?!</h2><p>10月的時候我發了一篇文討論大學教育。</p><p><iframe src="https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fsamsam2310%2Fposts%2F1101793469890040&width=500" width="500" height="431" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowtransparency="true"></iframe><br>這篇文是我有史以來讚最多的文(不對這不是重點)，重點是這篇文在寫得時候有一點情緒化，所以修改了很多遍，不過大概的感覺，就是台灣把技職系統和研究型大學混在一起，再加上中華文化的讀書考試氣氛，導致這些讀大學讀的很難過的悲慘故事發生。我覺得有興趣可以看看裡面的連結的說法，不過我覺得作者是在崩潰的狀態下寫的就是了QAQ。</p><p>在那之後我考了一些期中考之類的，同一時間學校也有一些演講，戰了一下線性代數的用途之類的。<br>我覺得，我們身在研究型大學，同時如果又期許自己以後能夠做一些研究和創新的話，很悲慘的可能真的需要學習這些很基礎很雜亂很無趣的知識，才能夠堆疊出我們想要的東西。到底哪些需要哪些不需要，每個科目需要做哪種方面的練習，真的是一個很難很難的難題呢QAQ。<br>不過屏除那些雜念，我覺得最重要的還是<strong>「拋開分數，擁抱學習」</strong>這句沒什麼人做得到的話，畢竟不管科目有沒有用，現在的評分方式真的是爛到一點卵用都沒有，相信這種分數不如去做星座測驗OAO。<br>好啦也沒有這麼誇張，但是<strong>學習任何東西真的切記不要走火入魔</strong>，至於怎樣叫做走火入魔就要靠人指點和個人造化了。<br>這些東西以我的個人經驗和觀察的話又可以寫一篇了吧QQ。<br>簡單說我覺得就是，上課要學到精華，不要執著在技巧上面，你隨時可以找台計算機來幫你算數，找台打火機來幫你生火，所以重點是理解算數和生火的過程，而不是比賽誰可以最快把火生起來。明明大家都知道這個道理，但是微積分考試的時候又是另外一回事了。</p><p>除了這些之外，這段時間裡面還發生了：</p><ul><li>去電影院看「你的名字」</li><li>過生日OAO</li><li>心血來潮換了封面相片?!</li><li>麥當勞大薯買一送一所以一直在吃薯條</li><li>花了4000買了第二個螢幕，進入雙螢幕的生活?!，看起來雖然很爽，但是實際上還在習慣中…</li></ul><h2 id="ACM-ICPC"><a href="#ACM-ICPC" class="headerlink" title="ACM ICPC"></a>ACM ICPC</h2><p>前兩個禮拜打完ICPC中壢站後，今年的ACM ICPC競賽好像告一段落了。雖然我一直嘴砲隊友，還是感謝一下隊友俞建安和王永平陪我打完今年的比賽。<br>ACM打起來和高中的比賽感覺很不一樣，除了少了一些壓力，多了一些歡樂之外，題型、難度、團隊合作也給人不同的感覺。我覺得高中有打競賽的話大學一定要試試看，可以不一定要放全力下去打，多花些時間感覺團隊合作和解題策略。<br>第一年試水溫結束後，應該會開始準備練習題目和爬 Codeforces 積分，明年應該會做出國的打算，希望明年可以有好成績。</p><h2 id="有的沒的課程"><a href="#有的沒的課程" class="headerlink" title="有的沒的課程"></a>有的沒的課程</h2><p>微積分學到積分了，線性代數學了投影資料分析等等，心理學很好玩，音樂概論是歷史課，SA期中99.5/120分OAO，平行程式設計要開始做期末專案了……<br>因為這些事情，自學的東西和想寫的東西都停滯了，打工也幾乎暫停了，希望可以趕快忙完趕快重新開始做那些事情。</p><h2 id="動畫"><a href="#動畫" class="headerlink" title="動畫"></a>動畫</h2><p>雖然很忙(明明都在耍廢OAO)，但是還是要抽時間看動畫補充一下能量?!<br>9月到現在補了：</p><ul><li>RE從零開始的異世界生活</li><li>真實之淚</li><li>幸腹塗鴉</li><li>蘿代的後宮玩具</li><li>赤髮白雪姬</li></ul><p>這幾部都不錯看，如果有時間都可以去看一看。<br>RE就是雷姆我就不解釋了，整部有點黑黑的氣氛我覺得是最重要的部分。<br>真實之淚就是一男三女胃痛番，結局難得出乎我意料OAO。<br>幸腹塗鴉女主明明是美術專長這部卻是美食動畫XDD，新房昭之的那個奇葩風格這部也可以清楚看到，另外整體滿萌的(基本上是百合番)。<br>蘿代的後宮玩具就是舊番，女主釘宮理惠，女二非常萌。<br>赤髮白雪姬就是標準的少女漫畫，滿滿的吐槽點，可是還是很順的把兩季看完了OAO。</p><p>於是封面就放了慵懶的雷姆?!</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>啊啊，結果就是，只有寫作業然後很累決定耍廢這樣的循環生活，就到現在了，說要補寫 Blog 也沒有寫幾篇。<br>不過學到的東西還是不少，如果能寫下來就太好了?!<br>希望期末可以ALLPASS，同時想學的想做的可以開始動工。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;//www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=60056756&quot;&gt;レム&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/diary-2016-1205上大學整天在耍廢/001.jpg&quot; title=&quot;レム(id=60056756)&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;日記寫成月記了XDD~~&lt;br&gt;嘛，至少我還記得寫…&lt;/p&gt;
&lt;p&gt;大學第一個學期過了超過一半了，發生了一些事情。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chino.taipei/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>TIOJ::1841-好．傳囉！ Nice Boat！</title>
    <link href="http://chino.taipei/code-2016-1205TIOJ-1841-%E5%A5%BD%EF%BC%8E%E5%82%B3%E5%9B%89%EF%BC%81-Nice-Boat%EF%BC%81/"/>
    <id>http://chino.taipei/code-2016-1205TIOJ-1841-好．傳囉！-Nice-Boat！/</id>
    <published>2016-12-04T19:58:21.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1841" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1841</a><br>POI轉到TIOJ的題目，很有趣的單調隊列題。<br>很久以前寫的，所以花了一些時間回想。</p><a id="more"></a><p>這題是從 POI 21th 第一題沙拉吧(Salad Bar)稍微做些修改而來的。</p><p>題目是給你一個整數序列，問你最長的安全區間長度是多少。<br>所謂的安全區間就是所有的前綴和和後綴和都大於等於0。</p><p>這題可以很容易的往把<strong>序列轉成前綴和</strong>去想。<br>轉成前綴和之後，我們可以發現，我們想要找的區間，就是這個區間滿足，<strong>區間的起點是區間最小值，區間的終點是區間最大值</strong>。<br>因為只要起點是最小值，那區間中每個點減起點都大於等於零，也就是這個區間內的每個前綴和都大於等於零；同理終點是最大值就代表終點減每個點都大於等於0，也就是這個區間內的每個後綴和都大於等於零。</p><p>那我們怎麼找到這個區間呢？<br>我們可以 $O(N^2)$ 的去尋找，對於每個左界，我們找找看他的右界最遠可以到哪裡。<br>這樣一找我們就發現，這個<strong>右界不可能超過第一個比左界小的位置</strong>，不然左界就不是區間最小值了。<br>同時，我們找右界的時候，因為右界是區間最大值，當我們要找下一個位置時，除非<strong>下一個位置的值大於等於這個位置的值</strong>，不然我們不用去考慮他，也就是我們只要找到右邊比現在這個點高(或一樣高)的位置就好了，中間的東西不用理他。<br>於是我們可以綜合以上兩點，維護兩個<strong>單調隊列</strong> $ L(i), R(i) $，分別代表右邊第一個小於 i 位置的位置和右邊第一個大於等於 i 位置的位置。<br>找答案時就維護兩個指針 l 和 r ，分別指向左界和右界，一開始都初始化成0。接著我們就要在 $[l, L(l) )$ 之間找答案(左界和右邊第一個小於左界的位置)。我們可以線性掃過去，找到最大值就是我們要的右界。直接做會太慢，於是我們可以用跳躍的，也就是直接看 $R(r)$ (右邊第一個比現在的位置大或一樣大的位置) 是不是還在我們限制的區間  $[l, L(l) )$ 內，如果是的話就跳過去。</p><p>這樣每次 r 不能再往右跳時，我們就找到一個合法區間，直接取 max 紀錄答案。<br>接下來，因為我們確定下一個左界不可能在現在的右界的左邊，因為區間內的所有點都大於等於原左界，所以 $L(l)$ 不會向右，右界也就不可能向右，所以左界在原右界左邊的區間全部都小於等於剛才的答案，可以直接跳過。所以我們可以直接做 $l = r = r+1$ ，也就是直接從右界的下一個位置開始找其他可能的答案。<br>因為上述的保證，我們可以發現 l 和 r 都是遞增的，所以這樣的作法是線性的。</p><p>實作時，可以把最後還留在單調隊列裡的點直接設定成 N+1 (N 為序列長度)，這樣在寫法上就會很漂亮。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL ST[N],SUM[N];</span><br><span class="line"><span class="keyword">int</span> t,l,r,ans,n,st,R[N],L[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        F(n)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;SUM[i+<span class="number">1</span>];</span><br><span class="line">            SUM[i+<span class="number">1</span>]+=SUM[i];</span><br><span class="line">        &#125;</span><br><span class="line">        st=<span class="number">0</span>;</span><br><span class="line">        F(n+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(st&amp;&amp;SUM[ST[st<span class="number">-1</span>]]&lt;=SUM[i])R[ST[--st]]=i;</span><br><span class="line">            ST[st++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(st--)R[ST[st]]=n+<span class="number">1</span>;</span><br><span class="line">        st=<span class="number">0</span>;</span><br><span class="line">        F(n+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(st&amp;&amp;SUM[ST[st<span class="number">-1</span>]]&gt;SUM[i])L[ST[--st]]=i;</span><br><span class="line">            ST[st++]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(st--)L[ST[st]]=n+<span class="number">1</span>;</span><br><span class="line">        l=r=ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(r&lt;=n&amp;&amp;R[r]&lt;L[l])r=R[r];</span><br><span class="line">            ans=max(ans,r-l);</span><br><span class="line">            l=r=r+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1841&lt;/a&gt;&lt;br&gt;POI轉到TIOJ的題目，很有趣的單調隊列題。&lt;br&gt;很久以前寫的，所以花了一些時間回想。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="DP" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/DP/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="POI" scheme="http://chino.taipei/tags/POI/"/>
    
      <category term="Stack" scheme="http://chino.taipei/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>C++11 的 Random library, 你還在用rand()嗎?</title>
    <link href="http://chino.taipei/note-2016-1020C-11-%E7%9A%84-Random-library-%E4%BD%A0%E9%82%84%E5%9C%A8%E7%94%A8rand-%E5%97%8E/"/>
    <id>http://chino.taipei/note-2016-1020C-11-的-Random-library-你還在用rand-嗎/</id>
    <published>2016-10-20T15:36:19.000Z</published>
    <updated>2018-03-23T19:26:14.082Z</updated>
    
    <content type="html"><![CDATA[<p>最近寫程式作業，要用蒙地卡羅求Pi值，所以要用到 random 函數。<br>結果使用後發現了各種問題，除了隨機的程度感覺不好之外，由於程式是多執行序，還遇到了 Thread Safe 的問題。<br>於是查了資料才發現原來C++11早就出了新的 Random 函式庫，提供了各種不同的需求。</p><a id="more"></a><p>C++11 的 Random 定義在 <code>&lt;Random&gt;</code> 這個函式庫裡面，使用前要先 import。<br>先來看一段產生 1~10 隨機整數的程式碼。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::random_device rd;</span><br><span class="line">  <span class="built_in">std</span>::default_random_engine gen = <span class="built_in">std</span>::default_random_engine(rd());</span><br><span class="line">  <span class="built_in">std</span>::uniform_int_distribution&lt;<span class="keyword">int</span>&gt; dis(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"some random numbers between 1 and 10: "</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dis(gen) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Random 乍看之下很複雜，但是其實很簡單，基本上亂數產生被拆成了兩個步驟：</p><ol><li>Generators (產生器、引擎)</li><li>Distributions (分佈)</li></ol><p>第一個產生器的部分，其實就類似 rand() 函數，他會產生一個在 min 和 max 之間的整數，並且會利用一些演算法來保證我們得到的亂數的一些性質等等。</p><p>而分布決定了我們的亂數真正的分佈範圍，比如我們想要讓他是 1~10 的整數、 -1~1 的浮點數等等。<br>分佈決定我們的數值範圍和分散狀態，像是平均分佈、常態(鐘形曲線)分佈等等，依照需求可以很自由的代換，不需要被亂數產生的演算法影響。</p><p>所以我們想要產生一個亂數只要選一個引擎和一個分佈，就可以很輕鬆的產生我們想要的亂數了，另外，由於他們都是類似STL的仿函數形式的物件，所以也不用擔心會有 Thread Safe的問題(不同執行序共用同一個變數導致的問題，以 rand() 來說就是有可能會產生大量一樣的亂數而讓多執行序的效果消失)。</p><p>下面列出一些引擎和分佈，至於說明就等有空再補吧(也許不會補了QQ)。</p><h3 id="引擎-Generators"><a href="#引擎-Generators" class="headerlink" title="引擎 Generators:"></a>引擎 Generators:</h3><ul><li><p>std::random_device<br>這是個 亂數引擎，但是他的定義是「非確定性亂數引擎」，也就是他不保證演算法、亂數的性質，單純的產生隨機的位元(看定義，Linux下好像是 32 bit)，因為沒有定義做法，所以也有可能根本就永遠都回傳0 XD(Windows的 Mingw就是這樣實作的)，但基本上新的g++編譯器應該都是有好好實作的，可能需要查一下編譯器的說明。<br>因為這個函數沒有保證實做，所以可能根本不亂，但是他是唯一一個可能產生「不一樣」的數字的引擎，其他的引擎都像是 rand() 一樣需要先給定種子，否則會產生一樣的結果。<br>這個引擎可以讓我們用來取代 time 函式庫等等，用來產生亂數種子。</p></li><li><p>std::default_random_engine<br>基本上就是預設的亂數引擎，如果沒有特殊需求就使用這個吧。我(非嚴謹的)測試過後覺得這個在速度和亂度上都很好，除非有特殊需求不然應該都是使用這個。</p></li><li><p>std::linear_congruential_engine<br><code>template &lt;class UIntType, UIntType a, UIntType c, UIntType m&gt;</code><br>基本上就是線性同餘算法的模板，可以自己設定a c m。<br>同樣使用模板的還有 mersenne_twister_engine std::subtract_with_carry_engine 兩個，不過實際上的內容我沒仔細看了XD。</p></li></ul><ul><li>discard_block_engine</li><li>independent_bits_engine</li><li>shuffle_order_engine</li></ul><ul><li>minstd_rand</li><li>minstd_rand0</li><li>mt19937</li><li>mt19937_64</li><li>ranlux24_base</li><li>ranlux48_base</li><li>ranlux24</li><li>ranlux48</li><li>knuth_b</li></ul><h3 id="分佈-Distributions"><a href="#分佈-Distributions" class="headerlink" title="分佈 Distributions :"></a>分佈 Distributions :</h3><h4 id="Uniform"><a href="#Uniform" class="headerlink" title="Uniform:"></a>Uniform:</h4><ul><li>uniform_int_distribution<br>整數平均分佈。</li><li>uniform_real_distribution<br>一般的平均分佈，有小數點的。</li></ul><h4 id="Related-to-Bernoulli-yes-no-trials"><a href="#Related-to-Bernoulli-yes-no-trials" class="headerlink" title="Related to Bernoulli (yes/no) trials:"></a>Related to Bernoulli (yes/no) trials:</h4><ul><li>bernoulli_distribution</li><li>binomial_distribution</li><li>geometric_distribution</li><li>negative_binomial_distribution</li></ul><h4 id="Rate-based-distributions"><a href="#Rate-based-distributions" class="headerlink" title="Rate-based distributions:"></a>Rate-based distributions:</h4><ul><li>poisson_distribution</li><li>exponential_distribution</li><li>gamma_distribution</li><li>weibull_distribution</li><li>extreme_value_distribution</li></ul><h4 id="Related-to-Normal-distribution"><a href="#Related-to-Normal-distribution" class="headerlink" title="Related to Normal distribution:"></a>Related to Normal distribution:</h4><ul><li>normal_distribution</li><li>lognormal_distribution</li><li>chi_squared_distribution</li><li>cauchy_distribution</li><li>fisher_f_distribution</li><li>student_t_distribution</li></ul><h4 id="Piecewise-distributions"><a href="#Piecewise-distributions" class="headerlink" title="Piecewise distributions:"></a>Piecewise distributions:</h4><ul><li>discrete_distribution</li><li>piecewise_constant_distribution</li><li>piecewise_linear_distribution</li></ul><p>另外，由於C++11越來越猛，所以他也有提供你合成函數的模板 std::bind()。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::random_device rd; <span class="comment">// 種子產生器</span></span><br><span class="line">    <span class="built_in">std</span>::mt19937 gen = <span class="built_in">std</span>::mt19937(rd()); <span class="comment">//使用mt19937引擎</span></span><br><span class="line">    <span class="built_in">std</span>::uniform_real_distribution&lt;&gt; dis(<span class="number">-1</span>, <span class="number">1</span>); <span class="comment">//使用平均分佈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> randfun = <span class="built_in">std</span>::bind(dis, gen); <span class="comment">//將引擎和分佈綁在一起變成新函數 randfun</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;randfun()&lt;&lt;<span class="string">' '</span>&lt;&lt;randfun()&lt;&lt;<span class="string">' '</span>&lt;&lt;randfun()&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//可以直接重複呼叫</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++11真的越來越方便了，也和C越走越遠了QQ。</p><p>參考資料：<a href="http://www.cplusplus.com/reference/random/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/random/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近寫程式作業，要用蒙地卡羅求Pi值，所以要用到 random 函數。&lt;br&gt;結果使用後發現了各種問題，除了隨機的程度感覺不好之外，由於程式是多執行序，還遇到了 Thread Safe 的問題。&lt;br&gt;於是查了資料才發現原來C++11早就出了新的 Random 函式庫，提供了各種不同的需求。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="http://chino.taipei/categories/Note/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::1821.基本語(NPSC 古可魚語)</title>
    <link href="http://chino.taipei/code-2016-0921TIOJ-1821-%E5%9F%BA%E6%9C%AC%E8%AA%9E-NPSC-%E5%8F%A4%E5%8F%AF%E9%AD%9A%E8%AA%9E/"/>
    <id>http://chino.taipei/code-2016-0921TIOJ-1821-基本語-NPSC-古可魚語/</id>
    <published>2016-09-20T17:42:24.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1821" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1821</a></p><p>這題是很經典的題目(?)<br>題目很簡單，就是給你一些語法，要你實作一個直譯器。</p><a id="more"></a><p>題目應該很好找，是NPSC的老題目，這是TIOJ的題目連結：<a href="http://web2.ck.tp.edu.tw/~step5/img/problem/0153/pH.pdf" target="_blank" rel="noopener">http://web2.ck.tp.edu.tw/~step5/img/problem/0153/pH.pdf</a></p><p>這題題目簡單，實作起來卻很複雜。<br>我是在看了一本書講Python實作概論，才忽然興起決定來寫這題。</p><p>首先就是有數種語法，基本上不難寫。<br>只有一種型別，就是數字。<br>最困難的大概就是lambda這個語法了。</p><p>實作起來第一個難關就是Parser，不過基本上語法很好解析，就是用小括號括起來的就是一句話，話裡面也可以遞迴的有話，基本上每句話就是一個函數，都有一個回傳值。唯一例外是數字和代表數字的變數可能直接出現沒有括號。</p><p>所以基本上可以把所有的語句都當作函數去實作，不過我是把幾個語句 begin, if 等等的直接當作語句去實作了，畢竟函數呼叫很耗資源。<br>display 是一定要當作函數實作的，因為他可以被當作函數傳入函數中呼叫(callback)，不過題目有另外保證不會用define語句去定義display的別名(不過其實要定義也沒差就是了)。</p><p>我實作的方式就是參考 Python 的實作方式的精簡版，先宣告一個基本的物件 OF_Obj，之後所有的物件都包含這個物件，這樣指標就可以互相轉型，基本的介面就全部用 OF_Obj 來溝通。<br>其中 OF_Obj 中有實作引用計數，不過這題是你直接複製也不會爆記憶體的，所以也可以不要實作引用計數或乾脆不要回收記憶體，當然現實中這樣是很不好的。</p><p>然後我定義了一些 bin code ，並在Parse函數中把語句轉成編譯好的 bin code，也就是轉成一個數字組成的 vector ，並把常數存到另外一個 vector 裡(常數都是 OF_Obj )，變數名字存進一個 string 的 vector中，這樣的結構組成一個 OF_Code 物件。</p><p>之後我就可以把這個物件傳入 exec 函數中執行，基本概念就是有一個 Stack 和一個 dict(用 unordered_map 實作)， 每個數字對應一個指令，利用指令操作 Stack 來達到我們想要的操作。<br>像是 define 就是先把後面的值壓入 Stack 中，然後執行指令 STORE_NAME ，找出對應的名字並把名字和 Stack 的 Top 存進 dict 裡面，之後變數就從這個 dict 裡面讀取。</p><p>至於 lambda 比較複雜，我們必須要編譯出另外一個 OF_Code 物件，並把他指定給一個 OF_Fun 物件。<br>參數傳遞就直接當作 define 語句就可以了。<br>重點是環境(那個存了變數的 dict )，也就是變數的連結。<br>按照題目敘述，優先參考的是函數參數，接著是定義的時候的環境，再來還有一個就是執行的時候的環境。於是我們可以發現古可魚語是可以實作閉包的(範測就可以看的到)。<br>我的作法很簡單，把函數定義時的環境直接複製一遍並存起來。之後呼叫的時候再把環境複製一變，並把函數定義時的環境覆蓋過去，最後才把參數定義出來，這樣就可以完成閉包了。<br>因為都是指標，所以複製是很廉價的，再加上有引用計數所以可以不用擔心變數的存活問題。</p><p>總結一下，運行的順序就是，吃一句話，編譯，執行，吃下一句話。</p><p>最後推薦一下我跟朋友借來看的書，「Python 源码剖析」。<br>這本書是中國人寫的，內容是分析 CPython 的原始碼，並透過重新編譯 Python 讓我們驗證我們的假設。分析的很仔細又不會太冗長，對 Python 和 C 都可以有更深入的了解和體會。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bin Code</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POP_TOP 1</span></span><br><span class="line"><span class="comment">// #define SWP_TOP 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_ADD 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_SUB 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_CMP 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD_NUM 90</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORE_NAME 91</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOAD_NAME 92</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JUMP_IF_FALSE 93</span></span><br><span class="line"><span class="comment">// #define JUMP_IF_TRUE 94</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JUMP_FORWARD 95</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAKE_FUN 96</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CALL_FUN 97</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dict unordered_map</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OF_HEAD(x) char c=x; int ref=1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OF_Obj</span>&#123;</span></span><br><span class="line">    OF_HEAD(<span class="string">'O'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INC(ob) ((ob)-&gt;ref++)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_obj</span><span class="params">(OF_Obj*)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEC(ob) <span class="meta-keyword">if</span>(--(ob)-&gt;ref == 0)delete_obj((OF_Obj*)(ob))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OF_Int</span>&#123;</span></span><br><span class="line">    OF_HEAD(<span class="string">'I'</span>);</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    OF_Int(<span class="keyword">int</span> w): val(w)&#123; &#125;</span><br><span class="line">&#125;OF_True(<span class="number">1</span>), OF_False(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OF_Code</span>&#123;</span></span><br><span class="line">    OF_HEAD(<span class="string">'C'</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; code;</span><br><span class="line">    <span class="built_in">vector</span>&lt;OF_Obj*&gt; num;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; name;</span><br><span class="line">    ~OF_Code()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:num)DEC(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OF_Fun</span>&#123;</span></span><br><span class="line">    OF_HEAD(<span class="string">'F'</span>);</span><br><span class="line">    OF_Code *co;</span><br><span class="line">    dict&lt;<span class="built_in">string</span>, OF_Obj*&gt; env;</span><br><span class="line">    OF_Fun():co(<span class="literal">NULL</span>)&#123; &#125;</span><br><span class="line">    ~OF_Fun()&#123;</span><br><span class="line">        <span class="keyword">if</span>(co)DEC(co);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:env)DEC(p.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_obj</span><span class="params">(OF_Obj *ob)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ob-&gt;c==<span class="string">'O'</span>)<span class="keyword">delete</span> ob;</span><br><span class="line">    <span class="keyword">if</span>(ob-&gt;c==<span class="string">'I'</span>)<span class="keyword">delete</span> (OF_Int*)ob;</span><br><span class="line">    <span class="keyword">if</span>(ob-&gt;c==<span class="string">'C'</span>)<span class="keyword">delete</span> (OF_Code*)ob;</span><br><span class="line">    <span class="keyword">if</span>(ob-&gt;c==<span class="string">'F'</span>)<span class="keyword">delete</span> (OF_Fun*)ob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="built_in">cin</span>&gt;&gt;c)) <span class="keyword">return</span> s;</span><br><span class="line">    s += c;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">'('</span> || c==<span class="string">')'</span> || c==<span class="string">';'</span>) <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">while</span>(c = <span class="built_in">cin</span>.peek())&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">' '</span> || c==<span class="string">'\n'</span> || c==<span class="string">'('</span> || c==<span class="string">')'</span>) <span class="keyword">return</span> s;</span><br><span class="line">        s += c;</span><br><span class="line">        <span class="built_in">cin</span>.ignore(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c:s) <span class="keyword">if</span>(!<span class="built_in">isdigit</span>(c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OF_assert</span><span class="params">(<span class="keyword">bool</span> ok)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ok)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse_sen</span><span class="params">(OF_Code *co, dict&lt;OF_Obj*, <span class="keyword">int</span>&gt; *num, dict&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *name, <span class="built_in">string</span> s, <span class="keyword">bool</span> is_fun=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="string">"("</span>)&#123;</span><br><span class="line">        s = getString();</span><br><span class="line">        parse_sen(co, num, name, s, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span>(is_fun)&#123;</span><br><span class="line">            <span class="keyword">int</span> an = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(s = getString(), s != <span class="string">")"</span>)&#123;</span><br><span class="line">                parse_sen(co, num, name, s);</span><br><span class="line">                an++;</span><br><span class="line">            &#125;</span><br><span class="line">            co -&gt; code.push_back(CALL_FUN);</span><br><span class="line">            co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">            co -&gt; code.push_back(an);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">")"</span>)&#123;</span><br><span class="line">        OF_assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_fun &amp;&amp; s == <span class="string">"begin"</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            s = getString();</span><br><span class="line">            <span class="keyword">if</span>(s != <span class="string">")"</span>)&#123;</span><br><span class="line">                parse_sen(co, num, name, s);</span><br><span class="line">                co -&gt; code.push_back(POP_TOP);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                co -&gt; code.pop_back();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_fun &amp;&amp; s == <span class="string">"if"</span>)&#123;</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        co -&gt; code.push_back(JUMP_IF_FALSE);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> p1 = co -&gt; code.size()<span class="number">-1</span>;</span><br><span class="line">        co -&gt; code.push_back(POP_TOP);</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        co -&gt; code.push_back(JUMP_FORWARD);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> p2 = co -&gt; code.size()<span class="number">-1</span>;</span><br><span class="line">        co -&gt; code.push_back(POP_TOP);</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        <span class="keyword">int</span> p3 = co -&gt; code.size()<span class="number">-1</span>;</span><br><span class="line">        s = getString();</span><br><span class="line">        OF_assert(s == <span class="string">")"</span>);</span><br><span class="line">        co -&gt; code[p1] = p2-p1;</span><br><span class="line">        co -&gt; code[p2] = p3-p2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_fun &amp;&amp; s==<span class="string">"+"</span> || s==<span class="string">"-"</span> || s==<span class="string">"&lt;"</span>)&#123;</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">"+"</span>)co -&gt; code.push_back(NUM_ADD);</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">"-"</span>)co -&gt; code.push_back(NUM_SUB);</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">"&lt;"</span>)co -&gt; code.push_back(NUM_CMP);</span><br><span class="line">        s = getString();</span><br><span class="line">        OF_assert(s == <span class="string">")"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_fun &amp;&amp; s==<span class="string">"define"</span>)&#123;</span><br><span class="line">        s = getString();</span><br><span class="line">        OF_assert(s!=<span class="string">"display"</span>);</span><br><span class="line">        parse_sen(co, num, name, getString());</span><br><span class="line">        <span class="keyword">if</span>(name-&gt;find(s) == name-&gt;end())&#123;</span><br><span class="line">            (*name)[s] = co -&gt; name.size();</span><br><span class="line">            co -&gt; name.push_back(s);</span><br><span class="line">        &#125;</span><br><span class="line">        co -&gt; code.push_back(STORE_NAME);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back((*name)[s]);</span><br><span class="line">        s = getString();</span><br><span class="line">        OF_assert(s == <span class="string">")"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_fun &amp;&amp; s==<span class="string">"lambda"</span>)&#123;</span><br><span class="line">        OF_Code *nc = <span class="keyword">new</span> OF_Code();</span><br><span class="line">        dict&lt;OF_Obj*, <span class="keyword">int</span>&gt; *nnum = <span class="keyword">new</span> dict&lt;OF_Obj*, <span class="keyword">int</span>&gt;();</span><br><span class="line">        dict&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; *nname = <span class="keyword">new</span> dict&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">        s = getString(); OF_assert(s==<span class="string">"("</span>);</span><br><span class="line">        <span class="keyword">for</span>(s = getString(); s!=<span class="string">")"</span>; s = getString())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nname-&gt;find(s) == nname-&gt;end())&#123;</span><br><span class="line">                (*nname)[s] = nc -&gt; name.size();</span><br><span class="line">                nc -&gt; name.push_back(s);</span><br><span class="line">            &#125;</span><br><span class="line">            nc -&gt; code.push_back(STORE_NAME);</span><br><span class="line">            nc -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">            nc -&gt; code.push_back((*nname)[s]);</span><br><span class="line">            nc -&gt; code.push_back(POP_TOP);</span><br><span class="line">        &#125;</span><br><span class="line">        parse_sen(nc, nnum, nname, getString());</span><br><span class="line">        <span class="keyword">delete</span> nnum;</span><br><span class="line">        <span class="keyword">delete</span> nname;</span><br><span class="line">        s = getString();</span><br><span class="line">        OF_assert(s == <span class="string">")"</span>);</span><br><span class="line">        (*num)[(OF_Obj*)nc] = co-&gt; num.size();</span><br><span class="line">        co -&gt; num.push_back((OF_Obj*)nc);</span><br><span class="line">        co -&gt; code.push_back(MAKE_FUN);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back((*num)[(OF_Obj*)nc]);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isNumber(s))&#123;</span><br><span class="line">        <span class="keyword">int</span> w = atoi(s.c_str());</span><br><span class="line">        OF_Obj *i = (OF_Obj*)<span class="keyword">new</span> OF_Int(w);</span><br><span class="line">        <span class="keyword">if</span>(num-&gt;find(i) == num-&gt;end())&#123;</span><br><span class="line">            (*num)[i] = co -&gt; num.size();</span><br><span class="line">            co -&gt; num.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        co -&gt; code.push_back(LOAD_NUM);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back((*num)[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name-&gt;find(s) == name-&gt;end())&#123;</span><br><span class="line">            (*name)[s] = co -&gt; name.size();</span><br><span class="line">            co -&gt; name.push_back(s);</span><br><span class="line">        &#125;</span><br><span class="line">        co -&gt; code.push_back(LOAD_NAME);</span><br><span class="line">        co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">        co -&gt; code.push_back((*name)[s]);</span><br><span class="line">        <span class="keyword">if</span>(is_fun)&#123;</span><br><span class="line">            <span class="keyword">int</span> an = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(s = getString(), s != <span class="string">")"</span>)&#123;</span><br><span class="line">                parse_sen(co, num, name, s);</span><br><span class="line">                an++;</span><br><span class="line">            &#125;</span><br><span class="line">            co -&gt; code.push_back(CALL_FUN);</span><br><span class="line">            co -&gt; code.push_back(<span class="number">1</span>);</span><br><span class="line">            co -&gt; code.push_back(an);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">OF_Code* <span class="title">parse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    OF_Code *co = <span class="keyword">new</span> OF_Code();</span><br><span class="line">    dict&lt;OF_Obj*, <span class="keyword">int</span>&gt; num;</span><br><span class="line">    dict&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; name;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        s = getString();</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">""</span>)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="string">";"</span>)&#123;</span><br><span class="line">            getline(<span class="built_in">cin</span>, s);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">";"</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        OF_assert(s == <span class="string">"("</span>);</span><br><span class="line">        parse_sen(co, &amp;num, &amp;name, getString(), <span class="literal">true</span>);</span><br><span class="line">        co -&gt; code.push_back(POP_TOP);</span><br><span class="line">        <span class="keyword">return</span> co;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; load_arg(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator &amp;p)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arg;</span><br><span class="line">    <span class="keyword">int</span> len = *(p++);</span><br><span class="line">    <span class="keyword">while</span>(len--)arg.push_back(*(p++));</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">(OF_Code *co, dict&lt;<span class="built_in">string</span>, OF_Obj*&gt; *env, <span class="built_in">stack</span>&lt;OF_Obj*&gt; *st)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = co-&gt;code.begin();</span><br><span class="line">    <span class="keyword">int</span> now, i;</span><br><span class="line">    OF_Obj *w, *v, *u;</span><br><span class="line">    OF_Fun *fun;</span><br><span class="line">    <span class="built_in">stack</span>&lt;OF_Obj*&gt; *nst;</span><br><span class="line">    dict&lt;<span class="built_in">string</span>, OF_Obj*&gt; *nenv;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arg;</span><br><span class="line">    <span class="keyword">while</span>(p != co-&gt;code.end())&#123;</span><br><span class="line">        now = *(p++);</span><br><span class="line">        <span class="keyword">if</span>(now &gt;= <span class="number">90</span>)arg = load_arg(p);</span><br><span class="line">        <span class="keyword">switch</span>(now)&#123;</span><br><span class="line">            <span class="keyword">case</span> PRINT:</span><br><span class="line">                w = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                v = (OF_Obj*)&amp;OF_False;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;((OF_Int*)w)-&gt;val&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                st -&gt; push(v);</span><br><span class="line">                INC(v);</span><br><span class="line">                DEC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> POP_TOP:</span><br><span class="line">                w = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                DEC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NUM_ADD:</span><br><span class="line">                w = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                v = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                u = (OF_Obj*)<span class="keyword">new</span> OF_Int(((OF_Int*)v)-&gt;val + ((OF_Int*)w)-&gt;val);</span><br><span class="line">                st-&gt;push(u);</span><br><span class="line">                DEC(w);</span><br><span class="line">                DEC(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NUM_SUB:</span><br><span class="line">                w = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                v = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                u = (OF_Obj*)<span class="keyword">new</span> OF_Int(((OF_Int*)v)-&gt;val - ((OF_Int*)w)-&gt;val);</span><br><span class="line">                st-&gt;push(u);</span><br><span class="line">                DEC(w);</span><br><span class="line">                DEC(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NUM_CMP:</span><br><span class="line">                w = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                v = st -&gt; top(); st -&gt; pop();</span><br><span class="line">                u = (OF_Obj*)((((OF_Int*)v)-&gt;val &lt; ((OF_Int*)w)-&gt;val) ? &amp;OF_True : &amp;OF_False);</span><br><span class="line">                st -&gt; push(u);</span><br><span class="line">                INC(u);</span><br><span class="line">                DEC(w);</span><br><span class="line">                DEC(v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// ---- arg ----</span></span><br><span class="line">            <span class="keyword">case</span> LOAD_NUM:</span><br><span class="line">                w = co-&gt;num[arg[<span class="number">0</span>]];</span><br><span class="line">                st -&gt; push(w);</span><br><span class="line">                INC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STORE_NAME:</span><br><span class="line">                s = co-&gt;name[arg[<span class="number">0</span>]];</span><br><span class="line">                w = st -&gt; top();</span><br><span class="line">                (*env)[s] = w;</span><br><span class="line">                INC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> LOAD_NAME:</span><br><span class="line">                s = co-&gt;name[arg[<span class="number">0</span>]];</span><br><span class="line">                w = (*env)[s];</span><br><span class="line">                OF_assert(st != <span class="literal">NULL</span>);</span><br><span class="line">                st -&gt; push(w);</span><br><span class="line">                INC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JUMP_IF_FALSE:</span><br><span class="line">                w = st -&gt; top();</span><br><span class="line">                <span class="keyword">if</span>(!(((OF_Int*)w)-&gt;val))p += arg[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JUMP_FORWARD:</span><br><span class="line">                p += arg[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MAKE_FUN:</span><br><span class="line">                fun = <span class="keyword">new</span> OF_Fun();</span><br><span class="line">                w = co -&gt; num[arg[<span class="number">0</span>]];</span><br><span class="line">                fun -&gt; co = (OF_Code*)w;</span><br><span class="line">                fun -&gt; env = dict&lt;<span class="built_in">string</span>, OF_Obj*&gt;(*env);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> p:fun-&gt;env)INC(p.second);</span><br><span class="line">                st -&gt; push((OF_Obj*)fun);</span><br><span class="line">                INC(w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CALL_FUN:</span><br><span class="line">                nst = <span class="keyword">new</span> <span class="built_in">stack</span>&lt;OF_Obj*&gt;();</span><br><span class="line">                i = arg[<span class="number">0</span>];</span><br><span class="line">                OF_assert(st-&gt;size()&gt;=i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span>(i--)nst-&gt;push(st-&gt;top()), st-&gt;pop();</span><br><span class="line">                fun = (OF_Fun*)st -&gt; top(); st -&gt; pop();</span><br><span class="line">                nenv = <span class="keyword">new</span> dict&lt;<span class="built_in">string</span>, OF_Obj*&gt;(*env);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> p: *nenv)INC(p.second);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> p: fun-&gt;env)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> q = nenv-&gt;find(p.first);</span><br><span class="line">                    <span class="keyword">if</span>(q != nenv -&gt; end())&#123;</span><br><span class="line">                        DEC(q-&gt;second);</span><br><span class="line">                        q-&gt;second = p.second;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        nenv -&gt; insert(make_pair(p.first, p.second));</span><br><span class="line">                    &#125;</span><br><span class="line">                    INC(p.second);</span><br><span class="line">                &#125;</span><br><span class="line">                exec(fun-&gt;co, nenv, nst);</span><br><span class="line">                OF_assert(nst-&gt;size()&gt;<span class="number">0</span>);</span><br><span class="line">                st-&gt;push(nst-&gt;top()); nst-&gt;pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> p: *nenv)DEC(p.second);</span><br><span class="line">                <span class="keyword">delete</span> nenv;</span><br><span class="line">                OF_assert(nst-&gt;size()==<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">delete</span> nst;</span><br><span class="line">                DEC(fun);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    dict&lt;<span class="built_in">string</span>, OF_Obj*&gt; env;</span><br><span class="line">    <span class="built_in">stack</span>&lt;OF_Obj*&gt; st;</span><br><span class="line">    OF_Fun* disp = <span class="keyword">new</span> OF_Fun();</span><br><span class="line">    disp -&gt; co = <span class="keyword">new</span> OF_Code();</span><br><span class="line">    disp -&gt; co -&gt; code.push_back(PRINT);</span><br><span class="line">    env[<span class="built_in">string</span>(<span class="string">"display"</span>)] = (OF_Obj*)disp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        OF_Code *co;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            co = parse();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(<span class="keyword">int</span> e)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Syntax Error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(co == <span class="literal">NULL</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// for(int i: co-&gt;code)&#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;" --- # "&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;" --- # Start Code..."&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            exec(co, &amp;env, &amp;st);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(<span class="keyword">int</span> e)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Runtime Error!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"END: "&lt;&lt;st.size()&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;" --- # END Code..."&lt;&lt;endl;</span></span><br><span class="line">        DEC(co);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p:env)DEC(p.second);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;" --- # END All...."&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1821&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1821&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這題是很經典的題目(?)&lt;br&gt;題目很簡單，就是給你一些語法，要你實作一個直譯器。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Else" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Else/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="NPSC" scheme="http://chino.taipei/tags/NPSC/"/>
    
  </entry>
  
  <entry>
    <title>終於上大學了~~~</title>
    <link href="http://chino.taipei/diary-2016-0911%E7%B5%82%E6%96%BC%E4%B8%8A%E5%A4%A7%E5%AD%B8%E4%BA%86/"/>
    <id>http://chino.taipei/diary-2016-0911終於上大學了/</id>
    <published>2016-09-10T19:06:03.000Z</published>
    <updated>2018-03-23T19:15:08.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="//www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=49992943">ろーちゃん | しゅがお [pixiv]</a><br><img src="/diary-2016-0911終於上大學了/001.png" title="しゅがお - ろーちゃん (id=49992943)"></p></blockquote><hr><p>很久很久沒更新了~~~<br>人是種只要安逸下來就會變很懶惰的生物QQ<br>不過生物本來就是這樣(?</p><p>來好好回想一下上一篇日記到現在中間發生了什麼事情<br>一邊滑FB一邊回想~~</p><a id="more"></a><h2 id="TOI-二階-4月"><a href="#TOI-二階-4月" class="headerlink" title="TOI 二階(4月)"></a>TOI 二階(4月)</h2><p>應該是從這裡，不過時間太久了我也不是記得很清楚了。<br>基本上TOI的二階就是和一階一樣，只是人變得很少，相對的比較沒有那麼熱鬧(?)<br>二階的兩個室友，多多和電人王，一個今年金牌，一個明年金牌(?)，再加上之前的CBD還有周強，我室友都好電喔(?<br>TOI二階還同時打了GCJ入圍跟Round1，和旁邊的人討論的用磷脂質的概念解題(?)<br>那題的答案是從一堆水母中，頭最大的挑他的頭，或是找一堆磷脂質（兩個點的環接上兩端最長的觸手），磷脂質全部都可以選，因為他們自給自足。(這到底什麼鬼題解XDD)</p><p>接著模考完全爆炸，個人覺得打得可能比水準低，該寫出來的沒寫出來或是寫太久之類的，不過過去了就算了吧。</p><p>重要事項：</p><ul><li>這段時間Windows出了一個讓你在WIN10上直接跑Linux程式的類似Wine的東西，非常神奇</li><li>統神轉播世界微積分大賽</li><li>建中IOI國手Comb被我斷了…QAQ</li><li>大家一起看學員孤島，度過溫馨快樂的時光(?)</li></ul><h2 id="畢籌會、耍廢等畢業-5月"><a href="#畢籌會、耍廢等畢業-5月" class="headerlink" title="畢籌會、耍廢等畢業(5月)"></a>畢籌會、耍廢等畢業(5月)</h2><p>這段時間就是把高中過完，去特教組找老師幫我弄薦送的事情，這裡要特別謝謝老師幫我把資料處理完送出去，還有輔導老師幫我看自我介紹。<br>之後除了參加各種奇怪活動之外，就是參加了建中畢籌會。<br>其實參加了畢籌會，也只是想要寫網站而已，後來也寫出來了，還有其他小細節，多認識了很多建中同學(都快畢業了反而才開始認識別人QQ)，工作說累很累，但也還好。<br>畢業典禮辦的差不多，最後煙火不錯，因為活動本身主要是頒獎，所以對於沒頒獎的人來說很無聊吧，希望以後會變成讓每個人都可以參與的典禮。(某議員聽說每年都不請自來把典禮當造勢QQ)</p><p>重要事項：</p><ul><li>參加了 APIO ，自己想出了一題覺得很爽XD</li><li>和學長去參加蔡玉玲政委的餐會，聽翟本喬說故事?</li><li>好像有期末考?</li><li>參加畢籌會，幫忙寫了一個網站</li><li>總統/五都/立委大選，國民黨慘敗(?)</li><li>聽說以後可以不用穿制服了(?)</li></ul><h2 id="畢業、打工-6月"><a href="#畢業、打工-6月" class="headerlink" title="畢業、打工(6月)"></a>畢業、打工(6月)</h2><p>畢業了，但其實沒有，因為學分不夠啦QAQ。<br>個人覺得大部分的學分都是因為請太多假才被當的，不過既然要打競賽當然要犧牲，所以只好去補修了，反正撐過去，大學以後說不定也是有機會反超變成學霸(?)<br>之後過幾天被張家齊邀請，參加了打工，寫一些爬蟲和自動部屬的東西，覺得薪水不錯(?)。另外還去幫忙一下爸媽的診所顧個櫃台。</p><p>高中畢業，回顧這三年，覺得自己真的成長很多，要謝謝這三年所有的老師、學長、同學、幫助過我的人。<br>那些過去的回憶不會消失，而是會變成我們的一部份，和我們繼續往前邁進。<br>每次只要和前一年的自己比較，就會覺得已經改變了很多了，這樣很能夠讓人期待明年這時的自己呢XD~</p><p>重要事項：</p><ul><li>我畢業了</li><li>華航發動罷工成功了</li></ul><h2 id="打工、亂寫程式、出去玩-7月"><a href="#打工、亂寫程式、出去玩-7月" class="headerlink" title="打工、亂寫程式、出去玩(7月)"></a>打工、亂寫程式、出去玩(7月)</h2><p>耍廢幾乎一個月之後，也到了暑假了，很多人都計畫了出去玩的行程，還有指考也差不多要考了?<br>另外就是補修時間也終於公布了，可以參加補修了。<br>然後應該是在這時候吧?我接到台大薦送沒上的消息QQ，還好後來交大上了，我也正式變成大學生了(爽)。<br>因為補修時間公布的很雷，我後來只跟到一團，高中資訊圈四校去墾丁還有高雄。<br>同時繼續亂寫程式和打工。</p><p>重要事項：</p><ul><li>高速公路上一台遊覽車發生火燒車，26名陸客沒有人生還</li><li>雄風三型飛彈誤射擊中漁船，船長身亡</li><li>土耳其發生政變</li><li>南海仲裁，太平島被視為礁，很多人很不爽~~</li><li>第一銀行發生ATM被駭、盜領8000萬台幣的事件，最後犯人因為在宜蘭吃白鯧魚配白飯被捕(?)</li><li>跟同學去高雄玩，拍到了高捷少女，還有嘲諷悠遊卡的加值機</li><li>上了交大</li></ul><h2 id="忘了在幹嘛-8月"><a href="#忘了在幹嘛-8月" class="headerlink" title="忘了在幹嘛(8月)"></a>忘了在幹嘛(8月)</h2><p>這個月就真的不知道在幹嘛了，打打工、耍耍廢，還有把補修上完，這個月就過了。<br>結果來不及去學開車了QQ。<br>啊啊，這個月有艦娘活動，之前拖了我弟X3入坑後，這次活動打起來格外有趣(?)</p><p>之後就搬到了交大宿舍了。<br>參加了學校的ACM校隊、選了課、準備開學。<br>我想，大學的事情就等下一篇吧zzz。</p><p>重要事項：</p><ul><li>手賤按到更新，Ubuntu14.04 -&gt; 16.04，好不容易修好的藍芽驅動爆炸QAQ，藍芽這次徹底消失了…。</li><li>建中(科學班而已)以後好像要招女生了?</li><li>北一女學生沒讓座被罵，於是家長決定提告，後來罵人的婦人道歉神隱，這是對正義魔人的第一次勝利(?)</li><li>搬進交通大學宿舍</li><li>精靈寶可夢GO在台灣上架，熱門地區人滿為患</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>總結一下高中的表現，從完全入門到可以拿到保送大學資格，應該算不錯了吧XD。<br>雖然以成績來看，從高一開始真的完全是直線下滑XD，不過我覺得值得。<br>這世界資訊這麼多，改變這麼快，哪怕是一點點的不必要的東西，對時間來說都是很大的浪費呢~</p><p>最近因該會讓Chino’s復活了，應該會多寫一點東西放進來。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;//www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=49992943&quot;&gt;ろーちゃん | しゅがお [pixiv]&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/diary-2016-0911終於上大學了/001.png&quot; title=&quot;しゅがお - ろーちゃん (id=49992943)&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;很久很久沒更新了~~~&lt;br&gt;人是種只要安逸下來就會變很懶惰的生物QQ&lt;br&gt;不過生物本來就是這樣(?&lt;/p&gt;
&lt;p&gt;來好好回想一下上一篇日記到現在中間發生了什麼事情&lt;br&gt;一邊滑FB一邊回想~~&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chino.taipei/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>TIOJ::ZJOI::1844 . 幻想乡战略游戏</title>
    <link href="http://chino.taipei/code-2016-0412TIOJ-ZJOI-1844-%E5%B9%BB%E6%83%B3%E4%B9%A1%E6%88%98%E7%95%A5%E6%B8%B8%E6%88%8F/"/>
    <id>http://chino.taipei/code-2016-0412TIOJ-ZJOI-1844-幻想乡战略游戏/</id>
    <published>2016-04-12T01:52:35.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1844" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1844</a><br>這題是大陸的OI題，跟樹分治有關，但是又進階了一點。<br>有點難寫，但是Code沒有很長，寫之前最好想清楚再下手可以省下一些不必要的Debug時間。</p><a id="more"></a><p>這題是ZJOI 2015的題目，ZJOI應該是大陸某個省的OI選拔，可能是浙江吧？</p><p>題目給你一棵樹，樹上每個點都有一些士兵，每個點之間有一個距離。你可以在某個點上設置補給站，補給的費用就是每個士兵到補給站的距離和，求最好的設置位置下，最低的花費是多少？題目還會更新每個點的士兵數量，可能會增加或是減少，每次更新完你就要輸出當前的最少花費是多少。</p><p>這題聽起來就有樹分治的感覺，但是題目有很多的更新，所以我們不能每次都樹分治一次，那怎麼辦？<br>這時候可以想到一個很顯然的作法（真的很顯然喔，自己可以想到那種），就是先把樹分治的過程存起來，然後每次更新，查詢。因為樹分治深度會小於$logN$，這樣就保證複雜度是$O(N logN)$。<br>於是我們就建了一顆重心樹，並維護這棵重心樹上的答案，然後對他做查詢。大陸的題解都叫他動態重心剖分或是動態（樹）點分治的樣子。</p><p>那實際怎麼做呢？<br>對於一個重心（以下稱為CBD），我們可以紀錄他的每棵子樹有幾個士兵、和目前的答案是多少（每個士兵到這個CBD的距離和），然後我們可以發現，如果這個點不是答案，答案一定存在士兵數最多的子樹中！！<br>這點其實很好想，如果把補給站從這個CBD移到某個子樹中，就等同把現在這個點當成一個新的子樹，這個新子樹的點數將會是除了原本那個子樹裡面的士兵A之外的所有士兵A’，而我們往子樹內移動經過的這條邊，需要經過這條邊的士兵數也會從A變成A’，所以我們發現，答案會在某個子樹內若且唯若那個子樹的士兵數量大於全部士兵的一半！否則你往該子樹移動一格，會經過你走的這條邊的士兵數反而會變多，總花費就上升了。所以實際上我們就選擇子樹士兵最多的走就好。<br>但是遞迴進去之後，子樹的答案就不是整顆樹的答案了，所以我們必須要把現在這個CBD的所有士兵數和目前的答案，扣掉我們要檢查的那棵子樹然後傳進去遞迴，在裡面我們要把這些值加到子樹的子樹上，以維護他是整顆樹的答案。<br>為了維護這件事，我們要紀錄每個子樹會連到哪些祖先（不包含自己），因為分治樹的子樹，同一個深度的祖先只會最多連到一個，所以紀錄連到哪個深度的祖先就可以了。然後在找答案的時候，就分別紀錄每個深度的祖先的數值是多少，再個別處理。要注意有些祖先不是接在子樹上而是直接接在子樹的重心CBD上，所以要另外檢查和自己重心相鄰的點哪些是自己的祖先，直接加入總和裡，這樣之後的遞迴答案才會是對的。<br>其實基本上就是亂做搞一搞該維護的維護一下就會AC了。注意數字範圍，小心溢位。<br>我用到的東西包含：原本的樹、重心樹、每個點到某一層祖先的距離、每個重心樹節點的士兵數和這些士兵到他父親的距離和。</p><p>這東西實在很難講，除了掌握答案一定在士兵數最多的點數還有利用點分治樹讓樹高低於 logN 之外，其他的大概要自己畫圖思考一遍比較好理解。</p><p>關於樹分治，有一題<a href="/code-HOJ-Problem-113-計步器/">之前寫過的題目</a><br>所謂的樹重心就是讓最大的子樹最小的那個點，用這個點去切樹，可以保證樹的大小都小於 logN （你可以用一條鍊去想就會明白了）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; PIL;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CBD</span>&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ch,prt;</span><br><span class="line">    <span class="keyword">int</span> fa,dri,sz;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp;</span><br><span class="line">    CBD():fa(<span class="number">-1</span>),sz(<span class="number">0</span>),dp(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">&#125;TR[N];</span><br><span class="line"><span class="keyword">bool</span> wed[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;PII&gt; G[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; DR[N];</span><br><span class="line"><span class="keyword">int</span> SZ[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_n</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> no, <span class="keyword">int</span> dr, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;prt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    DR[now].push_back(dr);</span><br><span class="line">    <span class="keyword">for</span>(PII p:G[now])<span class="keyword">if</span>(p.first!=no)&#123;</span><br><span class="line">        <span class="keyword">if</span>(wed[p.first])&#123;</span><br><span class="line">            prt.push_back(TR[p.first].dri);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum += count_n(p.first,now,dr+p.second,prt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_heart</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> no, <span class="keyword">int</span>&amp;h, <span class="keyword">int</span>&amp;hmx, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(PII p:G[now])<span class="keyword">if</span>(p.first!=no&amp;&amp;!wed[p.first])&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = find_heart(p.first,now,h,hmx,n);</span><br><span class="line">        mx = max(mx, tmp);</span><br><span class="line">        sum += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hmx &gt; max(sum, n-sum))h = now, hmx = max(sum, n-sum);</span><br><span class="line">    <span class="keyword">return</span> sum + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tree_fun_jizz</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> dri, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hrt,tmp = <span class="number">2147483647</span>;</span><br><span class="line">    find_heart(now,<span class="number">-1</span>,hrt,tmp,n);</span><br><span class="line">    wed[hrt] = <span class="literal">true</span>;</span><br><span class="line">    TR[hrt].dri = dri;</span><br><span class="line">    <span class="keyword">for</span>(PII p:G[hrt])<span class="keyword">if</span>(!wed[p.first])&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prt;</span><br><span class="line">        <span class="keyword">int</span> chh = tree_fun_jizz(p.first,dri+<span class="number">1</span>,count_n(p.first,hrt,p.second,prt));</span><br><span class="line">        TR[hrt].ch.push_back(chh);</span><br><span class="line">        TR[chh].fa = hrt;</span><br><span class="line">        TR[chh].prt = prt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hrt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    SZ[x] += u;</span><br><span class="line">    <span class="keyword">int</span> p = DR[x].size();</span><br><span class="line">    <span class="keyword">int</span> now = x;</span><br><span class="line">    <span class="keyword">while</span>(p--)&#123;</span><br><span class="line">        TR[now].sz += u;</span><br><span class="line">        TR[now].dp += <span class="number">1l</span>l*DR[x][p]*u;</span><br><span class="line">        now = TR[now].fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find_ans</span><span class="params">(<span class="keyword">int</span> now, <span class="built_in">vector</span>&lt;PIL&gt;&amp;ES)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mxdp = <span class="number">0</span>, sumdp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mxsz = <span class="number">0</span>, mxp = <span class="number">-1</span>, sumsz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(PII pr:G[now])<span class="keyword">if</span>(TR[now].dri&gt;TR[pr.first].dri)&#123;</span><br><span class="line">        <span class="keyword">int</span> pdri = TR[pr.first].dri;</span><br><span class="line">        sumsz += ES[pdri].first;</span><br><span class="line">        sumdp += <span class="number">1l</span>l*ES[pdri].first*DR[now][pdri] + ES[pdri].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p:TR[now].ch)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> dp = TR[p].dp;</span><br><span class="line">        <span class="keyword">int</span> sz = TR[p].sz;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:TR[p].prt)&#123;</span><br><span class="line">            assert(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;ES.size());</span><br><span class="line">            dp += <span class="number">1l</span>l*ES[i].first*DR[now][i]+ES[i].second;</span><br><span class="line">            sz += ES[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">        sumsz += sz;</span><br><span class="line">        sumdp += dp;</span><br><span class="line">        <span class="keyword">if</span>(sz &gt; mxsz)mxdp = dp, mxp = p, mxsz = sz;</span><br><span class="line">    &#125;</span><br><span class="line">    ES.push_back(PIL(sumsz-mxsz+SZ[now], sumdp-mxdp));</span><br><span class="line">    <span class="keyword">if</span>(mxp!=<span class="number">-1</span>)<span class="keyword">return</span> min(sumdp, find_ans(mxp,ES));</span><br><span class="line">    <span class="keyword">return</span> sumdp;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,q,rt,a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    F(n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        G[a].push_back(PII(b,c));</span><br><span class="line">        G[b].push_back(PII(a,c));</span><br><span class="line">    &#125;</span><br><span class="line">    rt = tree_fun_jizz(<span class="number">1</span>,<span class="number">0</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        update(a,b);</span><br><span class="line">        <span class="built_in">vector</span>&lt;PIL&gt; tmp;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;find_ans(rt,tmp)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1844&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1844&lt;/a&gt;&lt;br&gt;這題是大陸的OI題，跟樹分治有關，但是又進階了一點。&lt;br&gt;有點難寫，但是Code沒有很長，寫之前最好想清楚再下手可以省下一些不必要的Debug時間。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Divide &amp; Conquer" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Divide-Conquer/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="ZJOI" scheme="http://chino.taipei/tags/ZJOI/"/>
    
      <category term="Tree" scheme="http://chino.taipei/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm-DP優化之四邊形不等式優化</title>
    <link href="http://chino.taipei/code-2016-0402Algorithm-DP%E5%84%AA%E5%8C%96%E4%B9%8B%E5%9B%9B%E9%82%8A%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E5%84%AA%E5%8C%96/"/>
    <id>http://chino.taipei/code-2016-0402Algorithm-DP優化之四邊形不等式優化/</id>
    <published>2016-04-02T05:41:02.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p>最近寫了一些四邊形不等式優化的題目，也好好的重新看了一下之前看過的資料，終於對四邊形不等式有比較深的理解了，決定把它寫下來。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>所謂的四邊形不等式優化，是一種DP優化的技巧。<br>所謂的DP優化，就是在某些特殊的式子滿足某些條件後，我們可以用特定的順序、特定的資料結構來轉移，進而減少複雜度。其中四邊形不等式就是其中一種，另外常見的DP優化還有單調隊列優化、斜率優化等等。</p><p>所謂的四邊形不等式，就是如果我們現在有一個函數 $ f(i,j) $，<br>若 $ a&lt;b\leq c&lt;d, f(a,c) + f(b,d) \geq f(a,d) + f(b,c) $，則 f 滿足凹四邊形單調性。<br>若 $ a&lt;b\leq c&lt;d, f(a,c) + f(b,d) \leq f(a,d) + f(b,c) $，則 f 滿足凸四邊形單調性。</p><p>這兩個不等式在某些DP的情況下已經被證明出可以有某些優化了，所以當問題的DP轉移符合條件，又符合四邊形不等式，我們就可以使用某些優化。</p><p>在開始講之前，DP有些專用的術語， eD/tD 指的是有 $ N^e $ 子問題，每個子問題要依賴 $ N^t $ 個子問題來轉移。(由此可知總時間複雜度是 $ O(N^{e+t}) $)</p><h2 id="1D-1D-凹性優化"><a href="#1D-1D-凹性優化" class="headerlink" title="1D/1D 凹性優化"></a>1D/1D 凹性優化</h2><p>通常 1D/1D 的轉移式長得像這樣：<br>$$ f(i) = min \lbrace f(j) + w(j)\ |\ 0\leq j \leq i-1 \rbrace $$</p><p>這個優化有一個例題：<a href="/code-2016-0316TIOJ-IOI-1886-%E3%80%90IOI2015%E3%80%91Teams-%E4%B8%80%E5%A0%86%E6%8F%90%E5%A7%86/">IOI 2015 Teams</a>。<br>這題的其中一個解法裡有用到一個DP式：<br>$$ dp[i] = min \lbrace dp[j] + z(j,i) - k_i | 0 \leq j \leq i-1 \rbrace $$<br>其中他滿足式1：<br>$$ dp[i] + z(i,k) \leq dp[j] + z(j,k) \Rightarrow dp[i] + z(i,d) \leq dp[j] + z(j,d); (k&lt;d)$$<br>證明在連結裡，這個式子其實是從四邊形不等式轉過來的，可以把四個數字帶入四邊形不等式：<br>$$ f(i,j) = dp[i] + z(i,j) $$<br>$$ f(i,k) + f(j,d) \geq f(j,k) + f(i,d) ; (i&lt;j&lt;k&lt;d) $$<br>由上面的式子，你就會發現式1就會對了，因為$ f(i,k) \leq f(j,k) $ ， $ f(j,d) \geq f(i,d) $ 就不得不成立，否則就矛盾了。</p><p>而有了這個條件，我們可以發現當一個 i 在某一個時刻比 j 好時( i&lt;j )，他之後就會永遠比 j 好，於是我們用一個 list 存放當前的 id ，並用一個 vector 存放 list 的 iterator ，然後再開一個 heap 維護每個 id 什麼時候把他下一個殺掉(什麼時候會比下一個好)，接著再轉移前先從 heap 裡拿出已經過期的元素，用 vector 裡的指標找到他並把他 erase 掉，再重新計算這個數字的下一個人的死亡時間，最後用 list 找到最後一個元素，因為在更新完後保證了每個元素一定都比下一個差(如果比下一個好就會把下一個殺掉)，所以轉移最好的 id 就是 list 的最後一個元素。<br>這裡用 list 可以 O(1) 找到最後一個元素，用 vector 是為了 O(1) 找到 list 裡的某個東西。<br>我稱這個資料結構叫做 Magic。XDD</p><h2 id="1D-1D-凸性優化"><a href="#1D-1D-凸性優化" class="headerlink" title="1D/1D 凸性優化"></a>1D/1D 凸性優化</h2><p>和凹性很類似，可是變成某個 id 過了一個時間後就會永遠比較差，所以把 Magic 結構裡，前面殺後面改成後面殺前面，然後找 list 的最前面的元素來轉移。</p><p>以上兩個優化把複雜度從$ O(N^2) $優化成$ O(N\ logN) $</p><h2 id="2D-1D-凹性優化"><a href="#2D-1D-凹性優化" class="headerlink" title="2D/1D 凹性優化"></a>2D/1D 凹性優化</h2><p>通常 2D/1D 的轉移式是長這樣的：<br>$$ f(i,j) = min \lbrace f(i,k) + f(k,j) + w(i,j)\ |\ i \leq k \leq j \rbrace $$</p><p>可以枚舉 i ，之後每一維就用 1D/1D 凹性優化來解，複雜度 $ O(N^2\ logN) $</p><h2 id="2D-1D-凸性優化"><a href="#2D-1D-凸性優化" class="headerlink" title="2D/1D 凸性優化"></a>2D/1D 凸性優化</h2><p>這個優化有一個例題：<a href="/code-2016-0402TIOJ-1449-%E9%83%B5%E5%B1%80%E8%A8%AD%E7%BD%AE%E5%95%8F%E9%A1%8CEXTREME">郵局設置問題EXTREME</a>。<br>這題的轉移式和一般的 2D/1D 的轉移式有一些不同，所以讓我想了很久才想通。</p><p>這裡證明一下比較通用型的式子，針對不同題目會有一些小差異，最好重新證明一次才不會爛掉。<br>2D/1D 凸性優化，最後我們會想要得到一個結果 $ K(i,j-1) \leq K(i,j) \leq K(i+1,j) $， K(i,j) 代表的是 [i , j] 中用來轉移的最好的 k 。<br>有了這個性質，我們用特定順序，這裡就是 i 從 N-1 到 0 ， j 從 0 到 N-1 ，每次轉移就紀錄現在最好的 k 是誰，當我們要轉移 i,j 的時候，我們的迴圈裡的 k 只要從 $ [K(i,j-1), K(i+1,j)] $ 這個區間裡枚舉就好，總複雜度就會變成 $O(N^2)$。</p><p>現在來證明這件事情，<br>式1：$ a&lt;b\leq c&lt;d, f(a,c) + f(b,d) \leq f(a,d) + f(b,c) $ ，也就是四邊形不等式。<br>式2：$ f(i,k) + f(k,j) \geq f(i,d) + f(d,j); (k&lt;d)$ ，假設 d 是轉移 f(i,j) 最好的斷點(也就是$K(i,j)$)，那所有小於 d 的 k 當然結果都會比用 d 轉移大。</p><p>假設現在當 $k&lt;d$ ， $ f(i+1,k) + f(k,j) \geq f(i+1,d) + f(d,j) $ 成立的話， $ d = K(i,j) \leq K(i+1,j) $ ，因為我們知道所有小於 d 的 k 都比 d 還要差， $K(i+1,j)$ 不可能落在 $K(i,j)$ 之前。</p><p>現在來證明這個假設，<br>由式1可以得到 $ f(i+1,k) + f(i,d) \geq f(i+1,d) + f(i,k); (i &lt; i+1 &lt; k &lt; d) $<br>$ \Rightarrow f(i+1,k) + f(k,j) + f(i,d) + f(d,j) \geq f(i+1,d) + f(d,j) + f(i,k) + (k,j) $ ， 兩邊同加 $f(k,j)+f(d,j)$<br>$ \Rightarrow (f(i+1,k) + f(k,j) + f(i,d) + f(d,j)) - (f(i+1,d) + f(d,j) + f(i,k) + f(k,j)) \geq 0$<br>$ \Rightarrow (f(i+1,k) + f(k,j)) - (f(i+1, d) + f(d,j)) \geq (f(i,k) + f(k,j)) - (f(i,d) + f(d,j))$<br>因為式2， $ (f(i,k) + f(k,j)) - (f(i,d) + f(d,j)) \geq 0 $<br>$ \Rightarrow (f(i+1,k) + f(k,j)) - (f(i+1, d) + f(d,j)) \geq 0$ ，<br>$ \Rightarrow f(i+1,k) + f(k,j) \geq f(i+1,d) + f(d,j) $ ， QED。</p><p>同理可證 $K(i,j-1) \leq K(i,j)$，所以最後就可以得到 $ K(i,j-1) \leq K(i,j) \leq K(i+1,j) $。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>這篇基本上是抄學長的Blog還有學長的講義，自己再理解一遍而已，大家可以去看看原本的資料。<br>學長的Blog：<a href="http://momo-funnycodes.blogspot.tw/2012/06/tioj-1449-extreme.html" target="_blank" rel="noopener">http://momo-funnycodes.blogspot.tw/2012/06/tioj-1449-extreme.html</a><br>建中資訊培訓講義： <a href="http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f4c79992d9e0b5ee4aa9fd7db9115c673b2cf6150" target="_blank" rel="noopener">http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f4c79992d9e0b5ee4aa9fd7db9115c673b2cf6150</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近寫了一些四邊形不等式優化的題目，也好好的重新看了一下之前看過的資料，終於對四邊形不等式有比較深的理解了，決定把它寫下來。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="DP" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/DP/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="Algorithm" scheme="http://chino.taipei/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::1449 . 郵局設置問題EXTREME</title>
    <link href="http://chino.taipei/code-2016-0402TIOJ-1449-%E9%83%B5%E5%B1%80%E8%A8%AD%E7%BD%AE%E5%95%8F%E9%A1%8CEXTREME/"/>
    <id>http://chino.taipei/code-2016-0402TIOJ-1449-郵局設置問題EXTREME/</id>
    <published>2016-04-02T05:34:28.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1449" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1449</a><br>這題是DP，而且要用到四邊形不等式優化。<br>Code很短，可是證明真的超難的QQ。</p><a id="more"></a><p>這題題目給你N個數線上的房子，你可以把其中M個變成郵局，求所有房子到他最近的郵局的距離和最小是多少。</p><p>解法很簡單，如果只有一間郵局的時候，就選中位數當作郵局就可以了。<br>假如 $ w(i,j) $ 是[i,j]之間只有一間郵局的情況下，[i,j]之間的最短距離和是多少，我們可以得到DP轉移式：<br>$$ w(i,j) = w(i,j-1) + v(j) - v((i+j)/2) $$ 其中V(i)是第 i 棟房子的 x 座標，仔細推導一下就可以發現這個式子很神奇的會對。</p><p>所以先用$ O(N^2) $ 求出 $ w(i,j) $，然後假設$ dp(i,j) $ 是有 i 間郵局的情況下，[0,j]區間的答案是多少，我們可以得到轉移式：<br>$$ dp(i,j) = min \lbrace dp(i-1,k) + w(k+1, j)\ | i-1 \leq k \leq j-1 \rbrace $$ 也就是[0,k]區間中有i-1間郵局和[k+1,j]區間中有一間郵局的和的最小值。</p><p>這個DP式是$ O(N^3) $，但是可以用四邊形不等式優化成$ O(N^2) $，證明在<a href="/code-2016-0402Algorithm-DP優化之四邊形不等式優化/">這裡</a>。</p><p>總之我們可以透過四邊形不等式得到一個條件： $ K(i-1,j) \leq K(i,j) \leq K(i,j+1) $ ，其中$K(i,j)$是轉移$dp(i,j)$時最好的 k ，也就是說，要是我已經轉移了第一個和第三個區間([i-1,j]、[i,j+1])，那我現在要嘗試的 k 就不用從 i-1 到 j-1，而是可以從$ K(i-1,j) $ 到 $ K(i,j+1) $ ，對於所有$ j-i = c $的複雜度就是：<br>$$ \sum_{0\leq i &lt; N-c} K(i,j+1) - K(i-1,j) = O(N)$$ ，非常神奇。</p><p>這裡證明一下 $ dp(i,j) $ 會滿足四邊形不等式 $ f(a,c) + f(b,d) \leq f(b,c) + f(a,d); (a&lt;b&lt;c&lt;d)$。<br>先證式1： $ w(i,j) + w(i+1,j+1) \leq w(i+1,j) + w(i,j+1); (i&lt;i+1&lt;j&lt;j+1)$<br>若式1不成立，<br>式1 $ \Rightarrow w(i,j) + w(i+1,j) + v(j+1) - v((i+1+j+1)/2) \leq w(i+1,j) + w(i,j) + v(j+1) - v((i+j+1)/2) $<br>$ \Rightarrow -v((i+1+j+1)/2) \leq -v((i+j+1)/2) $<br>$ \Rightarrow v((i+j)/2+1) \geq v((i+j)/2) $ ，也會不成立，但是這和$ v(i) \leq v(i+1) $ 矛盾，<br>所以$ w(i,j) $ 符合四邊形不等式。</p><p>式2：$ dp(i,j) + dp(i+1,j+1) \leq dp(i+1,j) + dp(i,j+1) $<br>待補</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">int</span> D[N], W[N][N], DP[N][N], K[N][N];</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    Fl(i,<span class="number">2</span>,n+<span class="number">1</span>)<span class="built_in">cin</span>&gt;&gt;D[i];</span><br><span class="line">    sort(D+<span class="number">1</span>,D+n+<span class="number">1</span>);</span><br><span class="line">    Fl(i,<span class="number">1</span>,n+<span class="number">1</span>)Fl(j,i+<span class="number">1</span>,n+<span class="number">1</span>)&#123;</span><br><span class="line">        W[i][j] = W[i][j<span class="number">-1</span>] + D[j] - D[(i+j)/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Fl(i,<span class="number">1</span>,n+<span class="number">1</span>)DP[<span class="number">1</span>][i] = W[<span class="number">1</span>][i];</span><br><span class="line">    Fl(i,<span class="number">2</span>,m+<span class="number">1</span>)&#123;</span><br><span class="line">        K[i][n+<span class="number">1</span>] = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n;j&gt;=i;j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;now = DP[i][j], &amp;k1 = K[i<span class="number">-1</span>][j], &amp;k2 = K[i][j+<span class="number">1</span>];</span><br><span class="line">            now = <span class="number">2147483647</span>;</span><br><span class="line">            Fl(k,k1,k2+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = DP[i<span class="number">-1</span>][k] + W[k+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(now &gt; tmp)now = tmp, K[i][j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;DP[m][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1449&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1449&lt;/a&gt;&lt;br&gt;這題是DP，而且要用到四邊形不等式優化。&lt;br&gt;Code很短，可是證明真的超難的QQ。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="DP" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/DP/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
  </entry>
  
  <entry>
    <title>TOI選訓營第二個禮拜心得~~</title>
    <link href="http://chino.taipei/diary-2016-0330TOI%E9%81%B8%E8%A8%93%E7%87%9F%E7%AC%AC%E4%BA%8C%E5%80%8B%E7%A6%AE%E6%8B%9C%E5%BF%83%E5%BE%97/"/>
    <id>http://chino.taipei/diary-2016-0330TOI選訓營第二個禮拜心得/</id>
    <published>2016-03-30T07:13:06.000Z</published>
    <updated>2018-03-23T19:15:08.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="">Gate 奇幻自衛隊</a><br><img src="/diary-2016-0330TOI選訓營第二個禮拜心得/001.jpg" title="Gate"></p></blockquote><hr><p>TOI一階已經結束三天了，不過之前很累就拖到今天才寫心得。<br>這次幸運的進了二階，大學也有著落了，但是手機不見了，所以心情五味雜陳。</p><a id="more"></a><h2 id="第二個禮拜的生活"><a href="#第二個禮拜的生活" class="headerlink" title="第二個禮拜的生活"></a>第二個禮拜的生活</h2><p>依照前兩次的記憶，我通常第二個禮拜都再耍廢，寫些奇怪的東西之類的。因為之前一模考爛掉，所以第二週都會不知道要幹嘛，要玩也不是要認真也不是。<br>但是這次來之前做好心理準備了，無論是有入選還是沒入選，都要好好打好打滿，所以這次第二週倒是沒有特別的心情起伏，出了一些廢題，吃飯睡覺，沒網路就打打世紀帝國，發現我還是不太會玩這種要快速反應的遊戲QQ。<br>第二週的心理輔導課程是壓力，和我第一次來選訓營的心理輔導一樣，這次的課程我覺得比第一週的更符合我們的需求(第一週是維持網路上的人際關係)，上完這次課，有些勵志的感覺，課程用一句話總結的話，就是只要你打從心裡認為壓力是你成功的一個助力，那你將可以把壓力轉換成能量。</p><p>這次教授因為顏瑞楠的遊說，把CMS又打開了幾天讓我們練習，所以很多人都去把第一週的題目AC掉，可是我不太想要再回去碰了，所以連登入都沒登入XD。</p><h2 id="TOI二模"><a href="#TOI二模" class="headerlink" title="TOI二模"></a>TOI二模</h2><p>這是我的第三次二模了，這次非常驚喜的，系統是Ubuntu系統而且有附贈Sublime Text3!!!!!雖然因為我不會設定3的編譯設定檔，所以沒辦法用快速鍵編譯執行，但是能用Sublime寫還是很棒，至少手感順很多，編譯就用Terminal，也不會很麻煩。</p><p>但是這次的模考出了很多狀況，首先是一開始Judge會莫名的CE和WA，導致很多人寫IOI考古題得到了WA卻找不到BUG。不過這沒有影響到我，為什麼呢？因為Ubuntu一開始沒有網路密碼，所以根本沒辦法連上Judge QAQ，所以我第一個小時完全都在想題目還有寫掉考古題，不過這也算我運氣好吧，要是一開始可以傳，我可能會整個很緊張就爆掉，至少一開始不能連網對我不一定是壞事。<br>接下來，Judge又無預警的壞了，教授出來說明說是因為硬體出了狀況，所以可能會變成賽後Judge，一說完大家整個大爆炸，可是也沒辦法，這時我還在De PA的BUG，所以也沒時間裡他QAQ。後來Judge暫時修好了20分鐘，教授也決定延長一個小時的比賽時間。然後Judge又壞了，教授決定用另外的機器去開第二個Judge，最後教授叫我們全部人去登入另外一個Judge，時間也只剩一個小時多一點，於是教授又再延長了20分鐘。最後比賽總共比了5個小時20分鐘，真的非常的累。<br>不過我運氣很好的，幾乎沒有被影響到，不如說如果沒有延長時間我可能會爆炸吧。</p><p>第一題，題目是一定要取某一個點的最常嚴格遞增子序列。<br>題目一開始沒講清楚，導致大家都寫了奇怪的DP，後來加了一個條件才變成現在這樣，於是就變成了水題，可是我卻一直都拿0分，以至於我都寫了N&lt;=15的爆搜了，不過說來奇怪，我寫完爆搜後AC的竟然是最後三筆而前兩筆還是WA，於是我繼續找BUG，後來以為找到BUG，但是還沒傳就發前已經AC了!?!?!?!!?完全不知道發生什麼事，反正這之後分數就一直跑出來XDDD。</p><p>第二題，題目給你一個很多三次方程式乘起來的函數$ f(x) $，給你一段X軸上的區間[L,R]，要你找出 $ g(x) = f(x)(ax + b) $ 滿足$ g(x) $在[L,R]裡大於0的區間長度和小於0的區間長度比值介於0.99到1.01之間。限定a和b的範圍，請你輸出滿足條件的a,b組數。<br>這題我最後以0分作收，完全沒有去試。題目作法應該是先解方程式，找出所有的根，然後用前綴跟後綴維護答案，枚舉a,b來檢查答案。比較簡單的15分作法是，把區間[L,R]切成0.01的小塊，用迴圈去做，就可以不用找方程式的根了。最後這題沒有人100，最高分15。<br>這題我賽中就想到了上面的解法了，但是依照經驗，強烈覺得這題難在做法不是想法，所以果斷跳過。雖然15分沒拿到有些可惜，但是這次分數勉強算夠了。比較要後悔的是一模的很多分數沒拿到。</p><p>第三題，給你一個長度$ 10^6 $以內的字串S，S是一個十進位數字，他的每一個子字串Sij也都是一個十進位數字。如果Sij可以被數字M整除的話，就放進集合A裡面，求集合A中的數字總和$ MOD 10^9 + 7 $。<br>這題前面都可以用餘數來DP，做到N平方的複雜度。但是如果要線性的話，就要分成$ gcd(M,10) == 1, gcd(M,10) != 1 $ 兩種情況來討論。前面那種，可以直接用前綴後綴的預處理去做，複雜度是線性；後面那種，就必須討論一些狀況，不過我還沒理解。關鍵的式子是 $ A mod M - B mod M &lt;=&gt; (A-B) mod M $，其中去的箭頭是對的，但是回來的箭頭就必須要滿足M和10互質才成立。<br>賽中我直接寫了DP拿了39分的樣子。還有一筆DP，感覺複雜度是對的，可是沒有人用那種拿到分數，全部TLE了，那筆應該是29分。</p><p>第四題，給你40個數字，你可以從這些數字中挑一些子集A，請你計算滿足子集A中的數字的乘積%P為1的子集數量，也就是有多少子集的乘積除P的餘數是1，這裡保證P是質數。<br>這題我賽中其實沒有想到關鍵，只是亂報搜加亂用餘數DP，拿到了72分，其他人有些寫正解的，也只拿了72分XD，所以我運氣很好。<br>正解解法是，從中間剖一半，前後各有$ 2^{20}-1 $個數字，分別稱為集合A和B。因為P是質數，我們可以保證存在模逆元，而一個數字乘以自己的模逆元將會變成1(MOD P的情況下)，所以問題轉化成，對A的每個元素，檢查B中有幾個數字是自己的模逆元，如果先把B中的數字都取模逆元，就變成對A中每個元素檢查B中有幾個數字等於自己。另外，又有一個定理，就是$ AB^{-1} == A^{-1}B^{-1} $，所以我們可以先對後半段20個數字取模逆元，再枚舉乘起來放入HashTable中，這樣複雜度就變成O(N)了。</p><p>第五題，IOI 2015 Day2 Horses，因為一模考古題有點慘，這次考前很認真的記了一次寫法，而且這題我一開始就是自己想清楚而且沒有什麼BUG就AC的題目，所以這次只CE一次就AC了，CE是因為init()打成Init()。</p><p>比了這麼多次，心得就是，比賽還是要靜下心來，把能夠拿的分數拿到，不然要是卡再某一題，可能就會爆炸了。其實這次，我的分數主要都是靠小測資拿到的，所以會拿小測資真的很重要，最後幾筆就靠喇分和最後剩下的時間再慢慢想正解，這真的很重要。</p><h2 id="手機不見QQ"><a href="#手機不見QQ" class="headerlink" title="手機不見QQ"></a>手機不見QQ</h2><p>考完模考可能是太爽了，從師大上了回宿舍的公車，下車後手機就從口袋中消失了，客運公司說手機不再車上，我又沒有開網路，所以這次手機就真的不見了，以至於我現在都還在鬱卒。打電話去把他停話、去警察局報案，接下來就看運氣啦，不過應該是沒救了。</p><h2 id="有大學念了"><a href="#有大學念了" class="headerlink" title="有大學念了"></a>有大學念了</h2><p>說來奇怪，之前想了很多，做了很多，總是很激動的覺得考試制度很爛啊、很想上大學啊，可是發現上了二階後有大學了，卻突然一股不真實的感覺，其實我到現在還是不太相信自己有大學了。看著買好的指考參考書還有原本的讀書計畫，突然都好像用不到了，倒是原本打算放到7月再寫的Project，現在好像都必須要開始動工了。不過這個真的太難接受了，所以我決定再繼續耍廢一下～。<br>不過讀書真的很單純，就讀就好，可是現在不用讀書後，耍廢也不知道要幹嘛了。現在的工作好像就是寫程式打LOL看動畫，可是我卻想要先把原本打算寫完的數學學資寫完，真是超詭異的。</p><h2 id="Gate"><a href="#Gate" class="headerlink" title="Gate"></a>Gate</h2><p>這此一階看的就是這部啦。畫風還滿不錯的，雖然是後宮可是主角卻是大叔。故事大概就是，日本境內突然出現了一個傳送門，連結到了一個異世界，異世界人就跟開港前的中國一樣愚昧無知，被日本人打爛了。可是這次日本人沒有大舉侵略反而想要好好的外交一下(根本是日本自衛隊的廣告嘛XD)，不過異世界的帝國當然是跟開港前的中國一樣不但很廢還耍一堆小手段，總之這部就是看現代科技超猛敵人快嚇死很爽這樣XDDD。當然還有很多細節跟劇情，妹子賣萌的片段也不少，而且主角是個外表看似肥宅，戰鬥力卻過於常人的日本特戰隊隊員XDD(特種部隊的樣子)。<br>總之如果喜歡後宮還有爽番的話，這部五顆星。</p><h2 id="鄰座的怪同學"><a href="#鄰座的怪同學" class="headerlink" title="鄰座的怪同學"></a>鄰座的怪同學</h2><p>這是去一階前看的，不過一階在看Gate所以等回來後才看完。<br>好像是2012年的動畫，在網路上看到就跑去看了，我好像意外很喜歡看少女漫畫系的動畫QAQ。<br>反正沒什麼特別的就是又有一個好學生跟一個壞學生，結果好學生很迷惘壞學生沒那麼壞，然後在一起這樣XD。<br>不過這部還有加了一堆有的沒的，可是鋪了一些梗卻沒有收完，結局也好像沒有結局一樣，感覺就是要拍第二季結果沒拍一樣…。<br>不過好笑的地方還是都滿好笑的，很好看，可是沒有結局QQ，也許可以去看漫畫或是小說。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這篇打了好長啊，總之，高中弄了那麼久的資奧終於進了二階很開心，手機掉了很傷心，接下來除了拚一下之外，一些專案也要開始動工了，現在離7月還有90天，這九十天可以讀完指考也可以寫完很多程式，希望我可以好好利用別人無法擁有的這些時間。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;Gate 奇幻自衛隊&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/diary-2016-0330TOI選訓營第二個禮拜心得/001.jpg&quot; title=&quot;Gate&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;TOI一階已經結束三天了，不過之前很累就拖到今天才寫心得。&lt;br&gt;這次幸運的進了二階，大學也有著落了，但是手機不見了，所以心情五味雜陳。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chino.taipei/categories/Diary/"/>
    
    
      <category term="TOI" scheme="http://chino.taipei/tags/TOI/"/>
    
      <category term="Animate" scheme="http://chino.taipei/tags/Animate/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::IOI::1888 . 【IOI2015】Sorting 說停－中國洗衣問題</title>
    <link href="http://chino.taipei/code-2016-0326TIOJ-IOI-1888-%E3%80%90IOI2015%E3%80%91Sorting-%E8%AA%AA%E5%81%9C%EF%BC%8D%E4%B8%AD%E5%9C%8B%E6%B4%97%E8%A1%A3%E5%95%8F%E9%A1%8C/"/>
    <id>http://chino.taipei/code-2016-0326TIOJ-IOI-1888-【IOI2015】Sorting-說停－中國洗衣問題/</id>
    <published>2016-03-26T00:36:38.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1888" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1888</a><br>這題是IOI 2015 Day2的題目，題目跟Day1的Scale都是要你排序，可是這題比較好寫XDD。</p><a id="more"></a><p>題目給你一串1到N的序列，你必須透過交換兩個數字來排序，可是有一個人會來亂，那個人，估且叫他小明吧，他會依照一個自己的規則去交換兩個數字，而你會在他換完一次後，也跟著換一次，如果你換完後，序列已經成功排好序了，你們兩個就會停手，你希望找出最少需要幾次，還有你依序要怎麼交換兩個數字。</p><p>一開始你已經知道小明每一回合會交換哪兩個位置的數字了，我們先想一個叫作置換群的概念。其實也不是什麼很難的東西，就是如果你知道每個數字排好序後應該在哪個位置（這題中數字i應該在第i個位置），那你就去看看誰佔了你的位置，再看看誰佔了他的位置…，最後，你會繞一圈回來，這一個環就是一個置換群，如果環裡有k個數字，你很顯然可以用k-1次交換讓環裡所有數字歸位。<br>所以如果現在大小N的序列有j個環，那排序整個序列需要交換的次數就是N-j次。</p><p>有了以上性質，我們有一個離線作法，也就是二分搜答案，每次驗證一個答案L，先按照小明的交換順序去交換數字，自己則什麼都不做，到第L步時，檢查現在置換群的數量，如果小於等於L，代表存在一種作法可以在L步內排好序，因為你現在只要交換L次一定可以排好序，而且你只要在小明交換前先把你想換的數字換過來就好，小明只關心位置不關心裡面是什麼數字。複雜度O(N*logN)。</p><p>找出L之後，就摹擬找出交換策略。<br>先在第L步的狀態下，找出你要交換哪些數字。然後從一開始開始做，先讓小明交換一組數字，然後你從你需要交換的數字裡挑一組，看看他們現在在哪裡，交換這兩個位置，接著再讓小明交換第2組…依此類推，做完你就找到策略了。</p><p>關於一開始的二分搜，有一個很難寫的用Treap維護的在線找法，不過因為這題還要你找出策略，所以你還是必須離線找測略，但是你可以在線找出你需要幾次才能排好序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line">PII CH[N*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> D[N], H[N];</span><br><span class="line"><span class="keyword">bool</span> wed[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">    wed[now] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(!wed[D[now]])DFS(D[now]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(wed,<span class="number">0</span>,<span class="keyword">sizeof</span>(wed));</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    F(n)<span class="keyword">if</span>(!wed[i])DFS(i),res++;</span><br><span class="line">    <span class="keyword">return</span> n - res;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        F(n)<span class="built_in">cin</span>&gt;&gt;D[i],H[D[i]] = i;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        F(m)<span class="built_in">cin</span>&gt;&gt;CH[i].first&gt;&gt;CH[i].second;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">-1</span>,r = n*<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            F(n)D[H[i]] = i;</span><br><span class="line">            F(mid)swap(D[CH[i].first], D[CH[i].second]);</span><br><span class="line">            <span class="keyword">if</span>(check(n) &lt;= mid)r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">memset</span>(wed,<span class="number">0</span>,<span class="keyword">sizeof</span>(wed));</span><br><span class="line">        <span class="built_in">vector</span>&lt;PII&gt; ANS;</span><br><span class="line">        F(n)D[H[i]] = i;</span><br><span class="line">        F(r)&#123;</span><br><span class="line">            swap(D[CH[i].first], D[CH[i].second]);</span><br><span class="line">        &#125;</span><br><span class="line">        F(n)<span class="keyword">if</span>(!wed[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> now = i;</span><br><span class="line">            wed[now] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span>(!wed[D[now]])&#123;</span><br><span class="line">                ANS.push_back(PII(D[now],D[D[now]]));</span><br><span class="line">                now = D[now];</span><br><span class="line">                wed[now] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ANS.size()&lt;r)ANS.push_back(PII(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        assert(ANS.size() == r);</span><br><span class="line">        F(n)D[H[i]] = i;</span><br><span class="line">        F(r)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = CH[i].first,b = CH[i].second;</span><br><span class="line">            swap(H[D[a]],H[D[b]]);</span><br><span class="line">            swap(D[a],D[b]);</span><br><span class="line">            a = ANS[i].first, b = ANS[i].second;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;H[a]&lt;&lt;<span class="string">' '</span>&lt;&lt;H[b]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            swap(H[a], H[b]);</span><br><span class="line">            swap(D[H[a]], D[H[b]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1888&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1888&lt;/a&gt;&lt;br&gt;這題是IOI 2015 Day2的題目，題目跟Day1的Scale都是要你排序，可是這題比較好寫XDD。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Else" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Else/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="IOI" scheme="http://chino.taipei/tags/IOI/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::IOI::1889 . 【IOI2015】Towns 一堆糖</title>
    <link href="http://chino.taipei/code-2016-0325TIOJ-IOI-1889-%E3%80%90IOI2015%E3%80%91Towns-%E4%B8%80%E5%A0%86%E7%B3%96/"/>
    <id>http://chino.taipei/code-2016-0325TIOJ-IOI-1889-【IOI2015】Towns-一堆糖/</id>
    <published>2016-03-25T12:27:16.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1889" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1889</a><br>這題是IOI 2015 Day2的題目，還是台灣教授出的題目。<br>結果反而這題在賽中台灣隊死的很慘QQ。<br>題目是怪怪圖論互動題。</p><a id="more"></a><p>題目給你一棵樹，但是卻沒告訴你樹長怎樣，取而代之的，他告訴你樹有幾個葉子。<br>現在他讓你詢問樹上任意兩個葉子的距離，他要你求出兩個東西。<br>第1個就是，找出樹上一個點，他距離最遠的葉子的距離最近，請找出這個距離，我們稱他為樹半徑。另外，這個點在這題稱為樞紐，我們就先稱他為CBD吧。<br>第2個要問的是，對於這個CBD，如果以他為根節點，他的每個子樹的葉子數量不超過全部葉子的一半（小於等於n/2），我們就稱他為平衡的，輸出R，否則輸出負R（R就是第1個問題的半徑長度）。</p><p>這題一開始我完全沒有想法，沒什麼接觸過這種題目，題目又太跳脫了。<br>題目會限制我們查詢的次數，正解的次數是7n/2。<br>分開慢慢想，對於第一個問題，很顯然要先找出樹直徑，找出樹直徑的方法就是先對每一個點都查到點0的距離，選最長的點s，再對s做一次找最遠的點t，s到t就是直徑，這時我們已經可以求出每個點連到0-s這條鍊上的位置了，怎麼做呢？</p><p>假設點i在距離點s Si的地方接上了0-s鍊，這個接點到點i的距離是Di，到點0的距離是tmp（後面用不到），我們可以列出三個方程式，設兩點距離是L（i,j）。<br>$ Si + tmp = L(0,s) $<br>$ tmp + Di = L(0,i) $<br>$ Si + Di = L(i,s) $<br>其中我們發現，這3個方程式的L（）距離我們早就查詢過了，如果我們先開一個二維陣列快取查詢過的答案，那這幾個查詢不會浪費查詢次數。</p><img src="/code-2016-0325TIOJ-IOI-1889-【IOI2015】Towns-一堆糖/001.png"><p>把每個點的這3個方程式算出來，我們可以得到，每個點i到0-s鍊的距離Di，和這個接點到s的距離Si，而我們知道CBD會在s-t鍊上，而且也會在0-s上（因為0接到s-t上的時候，會走向比較遠的那一端，也就是s，所以CBD一定在靠s這邊）。所以每個點的Si就和（直徑s-t鍊長度 - Si）取max就是這個點距離最遠的點的距離，然後這個值最小的點就是CBD。</p><p>這樣我們就做完第一個問題了，在做第二個之前，我們要先知道，我們可能會找出兩個CBD，因為只要直徑中間一條邊的兩端出去深度都一樣就會這樣。<br>所以做第二個問題前，我們要先判段要選哪一個當CBD。我們可以透過Si小於等於比較靠近S的那個CBD的Si，來知道如果不選這個點當CBD，至少我們會得到一個多少點的子樹，如果找到發現大於n/2，那就一定要選這個點當CBD，因為另外一個不可能平衡了，不然就試試看另外那個，因為這個不可能了（有多於n/2的點再他那邊，選自己不可能平衡），或是兩邊都是n/2，那一定平衡，不過這個不判也不會怎樣。</p><p>所以我們現在已經選定了，之後我們就可以開始驗證CBD是否平衡。<br>我們需要轉化一下問題，我們先想想怎麼查詢兩個點在不在以CBD為根的樹的同一個子樹上，首先我們可以確定如果他們的Si和CBD的Si不一樣，那如果都在CBD的同一邊（都小於CBD的Si或是都大於CBD的Si），那就是同一棵，不然就不是同一棵;如果他們的Si都和CBD的Si一樣，那就看看他們之間的距離，和他們到0-s鍊的距離和是否相同，如果相同代表在不同棵子樹，不然他們一定是先會合在一起連到0-s鍊。也就是說如果符合：<br>$ Di + Dj \neq L(i,j) $<br>他們就會在不同子樹上。</p><p>有了這個判斷的方式後，我們想要透過判斷兩兩是否在同一棵子樹的方式來確定是否有一棵子樹葉子多於n/2。<br>問題可以變成，讓你查詢一堆數字是否相等，你要告訴我這些數字中是否存在絕對眾數（數量大於n/2的數）。<br>這個有很多作法，有論文用了兩個Stack法，我完全沒有感覺，只是覺得他很對。<br>不過我有一個更好玩的作法，打架法。</p><p>首先先把數字分成N組，每組都是一個人，然後奇數的組別和偶數的組別對打，如果最後還剩下一組奇數的組別，直接晉級。對打時，一隊派一人，兩人會一起死掉然後去墓地，兩隊不停的打，直到有一隊或是兩隊都沒人了，如果有剩下人就晉級。如果兩隊在查詢後發現是一樣的（用上面說的查詢去查），那就直接合併這兩組，人數相加，然後直接晉級。第二輪再重複上面的過程，直到剩下1組或是0組，如果是0組，代表絕對多數不存在（因為互相對打都死光了），剩下1組的話，絕對多數可能存在，但是不確定，必須拿這個數字去墓地裡驗證，看有哪些屍體和他是同一個數字，可是在遇到之前就被別人殺掉了，這樣其實也就是直接統計這個數字在集合裡的總數，如果大於n/2就是有絕對眾數，也就是原本的題目中的CBD不平衡，要輸出負數。</p><p>依照題目規定，因為我們一開始找第一個答案會用掉約2<em>n次，所以我們第二個答案只有3</em>n/2次可以用，打架第一輪如果直接死光了話，我們只會花n/2次，如果都成功合併晉級了，那我們之後墓地裡的屍體數量就會少一半（雖然我剛剛說一個一個打，但是很顯然我們對於已經知道是同組的屍體不需要分開比較，可以一起比），所以基本上次數可以控制在3*n/2裡，很神奇吧！</p><p>這樣就做完了，我再重新敘述一次打架的流程好了。</p><p>首先，有K組數字，每組有Pi個人，如我人數一樣，直接兩組丟進墓地，如果不一樣，小的那組直接進墓地，大的那組要把跟小的那組一樣的人數送進墓地，然後剩下的晉級，如果兩組人比較後發現是同一組的，那就合併晉級。<br>最後剩下0組就直接結束，剩下1組就拿這組去跟墓地裡的每組檢查，一樣就計算人數，看看有沒有超過一半，以上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1889.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">111</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; H;</span><br><span class="line"><span class="keyword">int</span> D[N], S[N];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getL</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cache[N][N];</span><br><span class="line">    <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">-1</span>)<span class="built_in">memset</span>(cache,<span class="number">0</span>,<span class="keyword">sizeof</span>(cache));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)swap(a,b);</span><br><span class="line">    <span class="keyword">int</span> &amp;tmp = cache[a][b];</span><br><span class="line">    <span class="keyword">if</span>(tmp)<span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">return</span> tmp = getDistance(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFP</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, res;</span><br><span class="line">    F(n)<span class="keyword">if</span>(i!=now)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; getL(now,i))&#123;</span><br><span class="line">            mx = getL(now,i);</span><br><span class="line">            res = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get3ANS</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y,<span class="keyword">int</span> &amp;z,<span class="keyword">int</span> fi,<span class="keyword">int</span> se,<span class="keyword">int</span> th)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = (fi+se+th)/<span class="number">2</span>;</span><br><span class="line">    x = sum - se;</span><br><span class="line">    y = sum - th;</span><br><span class="line">    z = sum - fi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> CBD)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S[a]==CBD&amp;&amp;S[b]==CBD)&#123;</span><br><span class="line">        <span class="keyword">return</span> D[a]+D[b] &gt; getL(a,b);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(S[a]==CBD||S[b]==CBD)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> S[a]&lt;CBD!=S[b]&gt;CBD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fight</span><span class="params">(<span class="keyword">int</span> CBD, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PII&gt;JIZZ,F1,F2;</span><br><span class="line">    F(n)F1.push_back(PII(i,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(F1.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        F(F1.size()/<span class="number">2</span>)&#123;</span><br><span class="line">            PII a = F1[i*<span class="number">2</span>], b = F1[i*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(equal(a.first,b.first,CBD))&#123;</span><br><span class="line">                F2.push_back(PII(a.first,a.second+b.second));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.second == b.second)&#123;</span><br><span class="line">                JIZZ.push_back(a);</span><br><span class="line">                JIZZ.push_back(b);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(a.second&gt;b.second)swap(a,b);</span><br><span class="line">                JIZZ.push_back(a);</span><br><span class="line">                JIZZ.push_back(PII(b.first,a.second));</span><br><span class="line">                F2.push_back(PII(b.first,b.second-a.second));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(F1.size()&amp;<span class="number">1</span>)F2.push_back(F1.back());</span><br><span class="line">        F1.swap(F2);</span><br><span class="line">        F2.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(F1.empty())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = F1[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span>(PII p:JIZZ)&#123;</span><br><span class="line">        <span class="keyword">if</span>(equal(F1[<span class="number">0</span>].first,p.first,CBD))cnt += p.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt*<span class="number">2</span> &gt; n;</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = Init(),s,t,L;</span><br><span class="line">        H.clear();</span><br><span class="line">        getL(<span class="number">-1</span>,<span class="number">-1</span>);<span class="comment">//init cache[N][N];</span></span><br><span class="line">        s = getFP(<span class="number">0</span>,n);</span><br><span class="line">        t = getFP(s,n);</span><br><span class="line">        L = getL(s,t);</span><br><span class="line">        F(n)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            get3ANS(S[i],tmp,D[i],getL(<span class="number">0</span>,s),getL(<span class="number">0</span>,i),getL(i,s));</span><br><span class="line">            H[S[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> p = H.upper_bound(L/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> CBD1 = p-&gt;first;</span><br><span class="line">        <span class="keyword">int</span> CBD2 = prev(p)-&gt;first;</span><br><span class="line">        <span class="keyword">int</span> CBD;</span><br><span class="line">        <span class="keyword">if</span>(max(L-CBD1,CBD1) == max(L-CBD2,CBD2))&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> p:H)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p.first &lt;= CBD2)cnt+=p.second;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CBD = cnt*<span class="number">2</span>&lt;n?CBD1:CBD2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            CBD = max(L-CBD1,CBD1) &lt; max(L-CBD2,CBD2)?CBD1:CBD2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> R = max(L-CBD,CBD);</span><br><span class="line">        answer(fight(CBD,n)?-R:R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1889&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1889&lt;/a&gt;&lt;br&gt;這題是IOI 2015 Day2的題目，還是台灣教授出的題目。&lt;br&gt;結果反而這題在賽中台灣隊死的很慘QQ。&lt;br&gt;題目是怪怪圖論互動題。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Graph" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Graph/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="IOI" scheme="http://chino.taipei/tags/IOI/"/>
    
      <category term="Tree" scheme="http://chino.taipei/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::1890 . 【Gate】這個笑容由我來守護</title>
    <link href="http://chino.taipei/code-2016-0323TIOJ-1890-%E3%80%90Gate%E3%80%91%E9%80%99%E5%80%8B%E7%AC%91%E5%AE%B9%E7%94%B1%E6%88%91%E4%BE%86%E5%AE%88%E8%AD%B7/"/>
    <id>http://chino.taipei/code-2016-0323TIOJ-1890-【Gate】這個笑容由我來守護/</id>
    <published>2016-03-23T05:02:46.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1890" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1890</a></p><p>這題是我出的。題目是圖論。順便交TOI一階的作業。<br>題目要求你求出一張圖的連通塊有多少個，會動態加入跟刪除點。</p><a id="more"></a><p>題目說有些人目標相同，有些不確定，所以我們可以透過兩個點是否連通來確定兩個人目標是不是一樣的。因為答案是連通塊數量，所以在加邊減邊的時候維護連通塊是否增加減少就可以了。</p><p>最樸素的作法就是每次加邊就先DFS一次檢查兩個點是否連通，是就不用減少連通塊數量，不然你就會合併兩個不連通的連通塊。刪邊也一樣，刪完看看兩個點是不是被切斷了。<br>這樣複雜度是M*（N+M），因為會加入M次邊，每次DFS複雜度N+M。</p><p>這題N是500，M是50萬，所以很顯然會爆炸。<br>所以再想想，一開始我有想過可分裂並查集，不過看來沒有什麼用，因為可分裂並查集不能路徑壓縮，複雜度會退話，而且很難寫。不過由此我們可以想到一個還不錯的作法。</p><p>首先，DFS複雜度會是N+M是因為可能會遍歷每條邊和點，但我們其實只想知道兩點是否有連通，所以我們只需要連通塊的生成樹就可以了，並不需要多餘的邊。如果每個連通塊都只有生成樹，那DFS的複雜度就變成N了，再用上面的作法複雜度就會變成N*M，就能AC了。</p><p>但是我們要怎麼決定要去掉哪些邊、要留下哪些邊？<br>觀察一下，我們發現每條邊都有一個出生時間和死亡時間（一開始的邊出生時間是0，最後沒被刪除的邊，死亡時間是無限大），當我們加入邊的時候，就直接加入，除非加入這條邊會產生環，那我們就將環上死亡時間最早的邊預先刪除，這樣就能保證生成樹的正確性，也可以求出答案了。</p><p>實作上，因為會有重邊，我開了一排queue來維護某個位置（兩個點之間）的邊的死亡時間，加邊就如上面所說，刪邊則要先確定是不是已經刪除過了，我是透過這個位置被預先刪除了幾個邊來維護。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">501</span>, M = <span class="number">500001</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; DIE[N*N];</span><br><span class="line"><span class="keyword">int</span> CUT[N*N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">bool</span> wed[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">bool</span> q;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125;D[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getEid</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)swap(a,b);</span><br><span class="line">        <span class="keyword">return</span> a*n+b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getTime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DIE[x].empty()?M:DIE[x].front();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> no, <span class="keyword">int</span> end, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    wed[now] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(now == end)&#123;</span><br><span class="line">        <span class="keyword">return</span> no == <span class="number">-1</span>?<span class="number">0</span>:getEid(now,no,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p:G[now])&#123;</span><br><span class="line">        <span class="keyword">if</span>(p!=no)&#123;</span><br><span class="line">        assert(!wed[p]);</span><br><span class="line">        <span class="keyword">int</span> tmp = DFS(p,now,end,n);</span><br><span class="line">        <span class="keyword">if</span>(tmp!=<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (no == <span class="number">-1</span> || getTime(tmp) &lt; getTime(getEid(now,no,n)))?tmp:getEid(now,no,n);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    G[a].insert(b);</span><br><span class="line">    G[b].insert(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = getEid(a,b,n);</span><br><span class="line">    <span class="keyword">if</span>(!DIE[tmp].empty())DIE[tmp].pop();</span><br><span class="line">    G[a].erase(b);</span><br><span class="line">    G[b].erase(a);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m,q,a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">        <span class="built_in">memset</span>(CUT,<span class="number">0</span>,<span class="keyword">sizeof</span>(CUT));</span><br><span class="line">        fill(DIE,DIE+n*<span class="number">2</span>,<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        F(n)G[i].clear();</span><br><span class="line">        F(m)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;D[i].a&gt;&gt;D[i].b;</span><br><span class="line">            D[i].q = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        F(q)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c&gt;&gt;D[i+m].a&gt;&gt;D[i+m].b;</span><br><span class="line">            D[i+m].q = c==<span class="string">'N'</span>;</span><br><span class="line">            <span class="keyword">if</span>(!D[i+m].q)&#123;</span><br><span class="line">                DIE[getEid(D[i+m].a,D[i+m].b,n)].push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        F(m+q)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(wed,<span class="number">0</span>,<span class="keyword">sizeof</span>(wed));</span><br><span class="line">            <span class="keyword">if</span>(D[i].q)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = DFS(D[i].a, <span class="number">-1</span>, D[i].b, n);</span><br><span class="line">                <span class="keyword">if</span>(tmp != <span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> now = getEid(D[i].a,D[i].b,n);</span><br><span class="line">                    <span class="keyword">if</span>(getTime(now) &gt; getTime(tmp))&#123;</span><br><span class="line">                        CUT[tmp]++;</span><br><span class="line">                        cut(tmp/n,tmp%n, n);</span><br><span class="line">                        link(D[i].a,D[i].b);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        CUT[now]++;</span><br><span class="line">                        <span class="keyword">if</span>(!DIE[now].empty())DIE[now].pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    link(D[i].a,D[i].b);</span><br><span class="line">                    ans--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = getEid(D[i].a,D[i].b,n);</span><br><span class="line">                <span class="keyword">if</span>(CUT[tmp])&#123;</span><br><span class="line">                    CUT[tmp]--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cut(D[i].a,D[i].b, n);</span><br><span class="line">                    <span class="keyword">if</span>(DFS(D[i].a, <span class="number">-1</span>, D[i].b, n)==<span class="number">-1</span>)ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=m)<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1890&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1890&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這題是我出的。題目是圖論。順便交TOI一階的作業。&lt;br&gt;題目要求你求出一張圖的連通塊有多少個，會動態加入跟刪除點。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Graph" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Graph/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="DFS" scheme="http://chino.taipei/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>TOI選訓營第一個禮拜心得~~</title>
    <link href="http://chino.taipei/diary-2016-0319TOI%E9%81%B8%E8%A8%93%E7%87%9F%E7%AC%AC%E4%B8%80%E5%80%8B%E7%A6%AE%E6%8B%9C%E5%BF%83%E5%BE%97/"/>
    <id>http://chino.taipei/diary-2016-0319TOI選訓營第一個禮拜心得/</id>
    <published>2016-03-19T13:59:58.000Z</published>
    <updated>2018-03-23T19:15:08.186Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=55824195" target="_blank" rel="noopener">AlphaGoたそ | とみを [pixiv]</a><br><img src="/diary-2016-0319TOI選訓營第一個禮拜心得/001.jpg" title="とみを - AlphaGoたそ(id=55824195)"></p></blockquote><hr><p>來寫寫TOI第1週還有一模的心得吧！<br>最近考了入營考還有有的沒的，然後到了現在，大概來紀錄一下。</p><a id="more"></a><h2 id="個人申請"><a href="#個人申請" class="headerlink" title="個人申請"></a>個人申請</h2><p>學測整個爆掉啦，所以就跳過個人申請啦，看看成績好像只能報師大，不過後來想想算了，結果這次因為AlphaGo師大資工突然變得爆高…，真是太好了沒有浪費時間去作自傳跟備審XDD。</p><h2 id="TOI-入營考"><a href="#TOI-入營考" class="headerlink" title="TOI 入營考"></a>TOI 入營考</h2><p>這次在經過校隊補選之後（我出題我好雷QAQ），我又被電焦了，入營考這次有5題，題目難度偏難，沒有排序題和前綴和題，直接就來個DP、分堆DP、大數轉二進位大數、奇怪摹擬題，拓普排序。<br>第1題寫太久還沒有AC，0分，害我一度以為我要止步入營考了。還好後來第3題拓普排序有AC，但接下來就是喇分時間了，因為剩下時間不多QQ。後來以第十幾名進了選訓營一階。</p><h2 id="學校"><a href="#學校" class="headerlink" title="學校"></a>學校</h2><p>因為學測前全部時間都拿去讀數學了，所以已經把高二以前的通通補完了，感覺自己的數學能力已經回到不錯的水準了，加上這學期極限一開始又比較簡單，小考拿了不錯的分數。這對同學來講可能只是正常表現，不過對我來說，因為之前荒廢課業太久，現在讀回來總有一種扎實感。一階完差不多要開始讀指考了，希望物理跟化學也可以像數學一樣找回最初的感覺XDD。<br>雖說如此，我還是覺得，如果沒有這兩三年學寫程式的過程的話，我可能還是一個視野很小的小確幸高中生吧…，希望有機會證明自己是對的XD。</p><h2 id="TOI-一階"><a href="#TOI-一階" class="headerlink" title="TOI 一階"></a>TOI 一階</h2><p>今年一階感覺少了很多熟人，不是畢業就是沒有來了。不過認識新的人總是件很開心的事。<br>今年跟去年一樣，要考考古題，於是大家又開始練習了，還好今年沒有什麼奇怪的二維線段樹。而且依照去年，教授應該會挑最簡單的考。題目變成了五題，雖然感覺很趕，至少比去年沒題目會寫好。<br>今年試著不要太緊張，寫題目之餘適當放鬆，感覺狀況應該會比較好，而且自從聽到學長說考試前不要想題目後，我覺得考試時的專心程度提升了XD。<br>然後這次看的動畫是Gate奇幻自衛隊，一部開著直升機掃射原始人然後到處收後宮的故事，到處充斥著自衛隊好棒棒的思想，不過反正看的很爽所以也沒差啦，妹子很萌，超萌的。</p><h2 id="TOI-第一次模考"><a href="#TOI-第一次模考" class="headerlink" title="TOI 第一次模考"></a>TOI 第一次模考</h2><p>然後來到模考了，這次因為有人要大學面試所以調整了時間，變成禮拜六考。<br>這次題目有五題，沒有意外的考了最簡單的考古題boxes，可是我一開始有粗心錯了幾次才AC，一次上傳時間間隔又要3分種，倒置我開場就很緊張。</p><p>然後我看了PA，題目是背包問題，並且如果解在10000以內要回溯找答案。感覺很難寫就跳過去了，但其實前三筆只要亂爆搜就會過，第四筆只要背包就會過，這樣84分。<br>PB，給你一堆矩形，問你有幾對有相交，這題我一開始方向對了，後來卻走上歪路，導致這次模考浪費許多時間。我想了二維BIT，卻發現MLE之後開始各種亂寫。正解是用掃描線和BIT，並檢查目前不重疊的組數（比較好算，只要兩個BIT），再計算重疊的組數。<br>PC，我連寫都沒寫，一開始想了一些不錯的作法，但是都沒有抓到最後的核心，其實我已經很接近正解了，沒有繼續真的太可惜了。題目是給你一堆點，你要分成兩堆並讓兩堆曼哈頓距離最大的兩組點大的那個最小。作法有利用X+Y,X-Y來轉換座標軸，轉45度後原本的距離就變成X,Y距離最大的那個，就可以二分答案，並試著用兩個矩形去包住所有的點。<br>小測資可以N^2建表然後從大排到小，二分答案然後建二分圖，邊大於嘗試的值就分到兩堆裡，然後驗證是否是二分圖。<br>PD，給你一個數字範圍還有一個區間l,r，問你l 到 r之間的數字乘起來會不會超過數字範圍也就是會不會溢位。題目好像很麻煩我想了一下後，就直接寫個迴圈拿基本分就跳過了。不過其實用迴圈和是當的剪枝，就可以AC了，因為不會溢位的數量在某些條件下不會很多，迴圈加2分搜還有一些特判就可以AC了QAQ。不過其實沒差，我覺得還是第3題0分比較虧。</p><p>這次新得就是，題目的部份分數給的明顯比去年寬很多，題目難度其實感覺也是下降。但是因為還是有緊張，所以對自己的表現其實不是很滿意。不過比起之前的成績，看來我還是有成長的。<br>其實一年的改變真的很多，只要一些努力，一年後真的會有許多的成長。有些人再某些方面止步不前，也許就是因為沒有相信一年其實可以做很多吧。總覺得這兩年的失敗讓我感覺到很多，不過這種東西就是個人的心情了，相信每個人都會有自己的獨特的心得吧。</p><h2 id="AlphaGo"><a href="#AlphaGo" class="headerlink" title="AlphaGo"></a>AlphaGo</h2><p>講點輕鬆的（其實不輕鬆？），Google某天又買了某家公司，然後他們是做人工智慧的，於是就寫出了一個下圍棋的AI叫作AlphaGo（見上圖？），隨然是台AI但感覺就是一個很可愛的小妹妹（？。然後這位小妹妹跟韓國圍棋九段李世乭打了5場比賽，前三場虐死李世乭，第四場被戳到弱點就賣萌，然後就自己投降了（會投降很萌吧）。第5場之後，打了最接近的一場比賽，然後李世乭還是輸了XD。<br>開發者有一個是師大資工的博士，連帶著今年個人申請一階師大突然異軍突起，還好沒去浪費時間XD。<br>因為圍棋被認為是最複雜的棋類遊戲，其狀態的優劣不好估計，狀態數又多，所以在AlphaGo之前都很少有可以打敗職業棋手的AI，AlphaGo算是一個大突破了，希望我能趕在說話AI被發明出來之前去參與那個過程，不過這也是之後的事了。<br>好想親手寫出AI啊～</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>感覺之後的生活會有很大的改變，無論如何，都要準備大學相關的東西，然後也會開始走出填鴨教育圈了吧！<br>一年後的現在會在哪裡做什麼完全沒有頭緒XD。反正都這樣了，就繼續看下去吧～。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=55824195&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AlphaGoたそ | とみを [pixiv]&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/diary-2016-0319TOI選訓營第一個禮拜心得/001.jpg&quot; title=&quot;とみを - AlphaGoたそ(id=55824195)&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;來寫寫TOI第1週還有一模的心得吧！&lt;br&gt;最近考了入營考還有有的沒的，然後到了現在，大概來紀錄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chino.taipei/categories/Diary/"/>
    
    
      <category term="TOI" scheme="http://chino.taipei/tags/TOI/"/>
    
      <category term="AlphaGo" scheme="http://chino.taipei/tags/AlphaGo/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::IOI::1887 . 【IOI2015】Horses 一堆猴兒斯</title>
    <link href="http://chino.taipei/code-2016-0319TIOJ-IOI-1887-%E3%80%90IOI2015%E3%80%91Horses-%E4%B8%80%E5%A0%86%E7%8C%B4%E5%85%92%E6%96%AF/"/>
    <id>http://chino.taipei/code-2016-0319TIOJ-IOI-1887-【IOI2015】Horses-一堆猴兒斯/</id>
    <published>2016-03-19T01:20:01.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p>這題是IOI 2015 Day2的題目，簡單的線段樹題。</p><a id="more"></a><p>題目給你一推X還有Y，Xi代表今天的倍率，Yi代表今天的價錢，你一開始只有一個東西，每過完一天就會變成Xi倍，然後在那天結束時你可以用Yi的價錢賣出，你可賣任意數量的東西。求最好的策略下，你最多能賺多少錢。<br>除了一開始給定的X跟Y，題目還會有一些X和Y的更新，每次更新都要輸出現在的最佳解。</p><p>觀察一下就會發現，把所有東西在最好的那天賣出一定是一種最好的解。因為要是留到之後再賣會更好，那乾脆全部留下來賣。</p><p>於是我們得到一個DP式子，就是如果DP[i]是 0 到 i 中，最適合把東西全部賣掉的時間，那對於DP[i+1]，如果 $ Y[DP[i]] &gt; X[DP[i]+1] \times X[DP[i]+2] \times … \times X[i+1] \times Y[i+1] $，那DP[i+1] = DP[i] ，不然 DP[i+1] = i+1。<br>上面的意思是說，現在有兩個可能的最佳適合時間可以賣東西，選左邊的條件是，左邊的價錢會比放到右邊那天時，東西變多的被率和那天的價錢的乘積還要大，不然我就放到那天然後賣掉一定比現在好。</p><p>有了上述性質，可以得到一個O（n）的解法，可是題目要更新，所以我們再看一下，發現這個DP可以用分治去做，也就是可以從中間對切，所以我們可以建一棵線段樹去維護答案，每次更新只要更新有改變的節點就好了，更新複雜度O（logn）。</p><p>實際上的作法就是，紀錄現在這格的最佳座標，還有這個座標左邊的X的乘積還有右邊X的乘積，從下面合併答案時，就是看左邊小孩的右邊X乘積和右邊小孩的左邊X乘積（也就是兩個最佳座標的中間那塊乘積），然後用上面的DP式去決定留哪個，然後把這塊的左邊X乘積和右邊X乘積也維護好。</p><p>這裡會遇到一個問題，就是你不知道那個數字爆掉了沒，如果爆了你就要取mod，然後就無法比大小了。<br>這裡有兩種作法，第1種是，每次mod一個數字前，先檢查他是不是大於1e9+7，如果是就紀錄一個tag（每個數字都要一個），如果tag是true，就當這個數字是無限大，而無限大乘以任何數都還是無限大，這樣上面的DP式，會有一邊一定是普通數字（Y），一邊是普通數字（Y）乘以一個可能是無限大的數字，這樣就可以比大小了。這個作法比較難是難在要維護每個數字的tag會有一些細節要注意。<br>第2種是，直接對數字取log，這樣乘法就會變成加法了，然後比大小也就沒問題了。這個作法的問題是可能有誤差，不過官方測資是可以輕鬆通過的。</p><p>我是用第1種。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500001</span>, MN = <span class="number">4</span>*N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> Q = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> X[N],Y[N];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">do_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">bool</span> &amp;tag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=Q)tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> a % Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">static</span> Seg ST[MN], *p;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> lsz,rsz;</span><br><span class="line">    <span class="keyword">int</span> mxi;</span><br><span class="line">    <span class="keyword">bool</span> lmod,rmod;</span><br><span class="line">    Seg *lc,*rc;</span><br><span class="line">    Seg()&#123; &#125;</span><br><span class="line">    Seg(<span class="keyword">int</span> l,<span class="keyword">int</span> r):lmod(<span class="literal">false</span>),rmod(<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            lsz = X[l];</span><br><span class="line">            rsz = <span class="number">1</span>;</span><br><span class="line">            lmod = rmod = <span class="literal">false</span>;</span><br><span class="line">            mxi = l;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        lc = <span class="keyword">new</span>(p++) Seg(l, mid);</span><br><span class="line">        rc = <span class="keyword">new</span>(p++) Seg(mid+<span class="number">1</span>, r);</span><br><span class="line">        pull();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lmod = rmod = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> msz;</span><br><span class="line">        <span class="keyword">bool</span> mmod = lc-&gt;rmod || rc-&gt;lmod;</span><br><span class="line">        msz = do_mod(lc-&gt;rsz * rc-&gt;lsz, mmod);</span><br><span class="line">        <span class="keyword">if</span>(lc-&gt;rmod || rc-&gt;lmod || mmod || Y[lc-&gt;mxi] &lt; msz * Y[rc-&gt;mxi])&#123;</span><br><span class="line">            mxi = rc-&gt;mxi;</span><br><span class="line">            lsz = do_mod(lc-&gt;lsz * msz, lmod);</span><br><span class="line">            lmod |= lc-&gt;lmod || mmod;</span><br><span class="line">            rsz = rc-&gt;rsz;</span><br><span class="line">            rmod = rc-&gt;rmod;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mxi = lc-&gt;mxi;</span><br><span class="line">            lsz = lc-&gt;lsz;</span><br><span class="line">            lmod = lc-&gt;lmod;</span><br><span class="line">            rsz = do_mod(msz * rc-&gt;rsz, rmod);</span><br><span class="line">            rmod |= rc-&gt;rmod || mmod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;l||x&gt;r)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">            lsz = X[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        lc-&gt;update(l, mid, x);</span><br><span class="line">        rc-&gt;update(mid+<span class="number">1</span>,r,x);</span><br><span class="line">        pull();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getAns</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lsz * Y[mxi] % Q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Seg::ST[MN], *Seg::p = Seg::ST;</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,q,a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        F(n)<span class="built_in">cin</span>&gt;&gt;X[i];</span><br><span class="line">        F(n)<span class="built_in">cin</span>&gt;&gt;Y[i];</span><br><span class="line">        Seg::p = Seg::ST;</span><br><span class="line">        Seg *RT = <span class="keyword">new</span>(Seg::p++) Seg(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;RT-&gt;getAns()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="number">1</span>)X[b] = c;</span><br><span class="line">            <span class="keyword">else</span> Y[b] = c;</span><br><span class="line">            RT-&gt;update(<span class="number">0</span>,n<span class="number">-1</span>,b);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;RT-&gt;getAns()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這題是IOI 2015 Day2的題目，簡單的線段樹題。&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Data Structure" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Data-Structure/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="IOI" scheme="http://chino.taipei/tags/IOI/"/>
    
      <category term="線段樹" scheme="http://chino.taipei/tags/%E7%B7%9A%E6%AE%B5%E6%A8%B9/"/>
    
  </entry>
  
  <entry>
    <title>TIOJ::IOI::1885 . 【IOI2015】Scales 斯克兒悠斯-一堆天平</title>
    <link href="http://chino.taipei/code-2016-0318TIOJ-IOI-1885-%E3%80%90IOI2015%E3%80%91Scales-%E6%96%AF%E5%85%8B%E5%85%92%E6%82%A0%E6%96%AF-%E4%B8%80%E5%A0%86%E5%A4%A9%E5%B9%B3/"/>
    <id>http://chino.taipei/code-2016-0318TIOJ-IOI-1885-【IOI2015】Scales-斯克兒悠斯-一堆天平/</id>
    <published>2016-03-18T00:14:15.000Z</published>
    <updated>2018-03-23T19:15:08.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tioj.ck.tp.edu.tw/problems/1885" target="_blank" rel="noopener">http://tioj.ck.tp.edu.tw/problems/1885</a><br>這是題爆搜題，可是我卻寫了一整天，還重寫了一遍才AC。<br>不過果然又是AC後覺得不難寫的題目…。<br>感覺IOI 2015 Day1的題目想要AC都要發現一些很漂亮的性質啊！</p><a id="more"></a><p>題目是這樣的，你有6個東西，你可以透過題目提供的函數來查詢，而你必須利用這些函數來排序並回傳這6個東西的順序。<br>想要排序不難，但是題目限制了你呼叫查詢函數的次數，正解必須在6次內排好序（6次剛好也是下界）。<br>如果你超過了6次，在IOI是可以得到部份分數的，但是OJ上我們就只能寫正解（special judge功能不夠完整），也就是我們必須六次完成。</p><p>如果8次的話很容易，只要先亂叫一下，然後在針對幾種狀況處理，雖然沒寫過，不過如果比賽遇到這題，這樣寫期望值應該會比較高吧？<br>要到6次，我們必須每一步都去考慮很多狀況，既然這樣就暴力建出決策樹吧！<br>所謂的決策樹，就是我如果現在做了這個查詢後，得到了不同的結果後我要怎麼繼續的一顆樹，也就是如果你建出來了，你不管遇到什麼情況都可以直接查樹來找到下一步要幹嘛。</p><p>要做到6次排序，我們希望可以有一個深度是6的決策樹，然後到底就知道答案了。<br>我們的4種查詢函數，回傳的結果剛好都只有三種，回傳第1個、第2個或是第3個數字，所以對於每種查詢只要找出3個結果的狀況。<br>一開始，假設我們有720種可能遇到的排列（六階乘，1到6的所有排列情況），然後共有120種可以做的查詢（前三種找最小、中間、最大的函數，都各有C（6,3）=20種可能的查詢法，第四種20種每種都還可以配三個不同的數字，所以60種，共120種），我們一開始就從120的隨便一種查詢開始，共有三種結果，然後拿這個去對720種分類，看那720種排列哪個符合哪一個結果，這些排列會被分進3個集合裡，我們就可以繼續遞迴，直到這個集合被刪光或是剩下唯一一個狀況，也就代表我們完成排序了，或是這是一個實際不可能遇到的情況（刪到光代表出之前的查詢中現矛盾的結果，這在實際狀況不會出現，但是在決策樹上會出現，實際上我們有729個終點，卻只有720種排列，很顯然會有9個這種終點）。<br>如果深度到6還剩下超過一種結果，那就無法在6次內排序，回傳失敗。每次試一種分法分成三堆，如果三堆都可以在接下來的搜尋中完成目標，就是OK的，不然就要繼續搜尋，搜不到就回傳失敗。</p><p>這樣的搜尋不夠快，要加一個很重要的剪枝，也就是，每次分成三堆的時候，每堆的大小都要小於等於 720/3的深度次方，又或者是 3的(6-深度)次方（6或是5要搞清楚，這跟每個人定義深度從0還是1開始有關係），舉例來說，720一定只能被分成3個240的堆，240只能被分成80，80可以被分成27、27、26，因為定義了一定不能大於，其實也就是定義了不能小於一定的值。<br>為什麼這樣會對？其實我們可以發現，每個排列不是被分進第1堆就是其他兩堆，如果有一堆太多，那很顯然他不能再接下來的步數內被分成剩下1的三堆，因為一定有人會分到大的那堆，然後你一直除三最大那堆也不會是1。<br>其實這也是我們最後會找到的解法會顯現的狀況，也就是每次查詢都可以分類成三堆大小差不多的狀況，這樣就能完成在6次排序。</p><p>在用查詢刪除排列的操作上，可以摹擬題目給你的查詢函數，實際看看結果是1、2、3哪個再決定分到哪堆去，剩下哪些狀態就用vector存就可以了，查詢可以用一個陣列或是struct，存函數編號、參數。再來就是注意細節。</p><p>一開始動態開點就不小心讓電腦當機兩次…，以後不要在不安全的情況下new點了…。整份code因為細節很多，最後還是到了快180行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1885.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(n) Fi(i,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fi(i,n) Fl(i,0,n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fl(i,l,n) for(int i=l;i&lt;n;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">721</span>][<span class="number">6</span>], C[<span class="number">121</span>][<span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fid,ans;</span><br><span class="line">    Tree* ch[<span class="number">3</span>];</span><br><span class="line">    Tree(<span class="keyword">int</span> dep)&#123;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dep == <span class="number">6</span>)F(<span class="number">3</span>)ch[i] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            F(<span class="number">3</span>)ch[i] = <span class="keyword">new</span> Tree(dep + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getL</span><span class="params">(<span class="keyword">int</span> *s, <span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">3</span>];</span><br><span class="line">    F(<span class="number">6</span>)Fi(j,<span class="number">3</span>)<span class="keyword">if</span>(s[i] == c[j+<span class="number">1</span>])pos[j] = i;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">0</span>]&lt;pos[<span class="number">1</span>]&amp;&amp;pos[<span class="number">0</span>]&lt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">1</span>]&lt;pos[<span class="number">0</span>]&amp;&amp;pos[<span class="number">1</span>]&lt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getH</span><span class="params">(<span class="keyword">int</span> *s, <span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">3</span>];</span><br><span class="line">    F(<span class="number">6</span>)Fi(j,<span class="number">3</span>)<span class="keyword">if</span>(s[i] == c[j+<span class="number">1</span>])pos[j] = i;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">0</span>]&gt;pos[<span class="number">1</span>]&amp;&amp;pos[<span class="number">0</span>]&gt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">1</span>]&gt;pos[<span class="number">0</span>]&amp;&amp;pos[<span class="number">1</span>]&gt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getM</span><span class="params">(<span class="keyword">int</span> *s, <span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">3</span>];</span><br><span class="line">    F(<span class="number">6</span>)Fi(j,<span class="number">3</span>)<span class="keyword">if</span>(s[i] == c[j+<span class="number">1</span>])pos[j] = i;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">0</span>]&lt;pos[<span class="number">1</span>]!=pos[<span class="number">0</span>]&lt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos[<span class="number">1</span>]&lt;pos[<span class="number">0</span>]!=pos[<span class="number">1</span>]&lt;pos[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getN</span><span class="params">(<span class="keyword">int</span> *s, <span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">4</span>];</span><br><span class="line">    F(<span class="number">6</span>)Fi(j,<span class="number">4</span>)<span class="keyword">if</span>(s[i] == c[j+<span class="number">1</span>])pos[j] = i;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">6</span>;</span><br><span class="line">    F(<span class="number">3</span>)<span class="keyword">if</span>(pos[i] &gt; pos[<span class="number">3</span>])tmp = min(pos[i], tmp);</span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> getL(s, c);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        F(<span class="number">3</span>)<span class="keyword">if</span>(s[tmp] == c[i+<span class="number">1</span>])<span class="keyword">return</span> i;</span><br><span class="line">        assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> *s, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    F(<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == a)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == b)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> DP[<span class="number">721</span>][<span class="number">121</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">s_check</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> fid, <span class="keyword">int</span> fres)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;x = DP[p][fid][fres];</span><br><span class="line">    <span class="keyword">if</span>(x)<span class="keyword">return</span> x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(C[fid][<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">        x = getH(P[p],C[fid]) == fres?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C[fid][<span class="number">0</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">        x = getL(P[p],C[fid]) == fres?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C[fid][<span class="number">0</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">        x = getM(P[p],C[fid]) == fres?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(C[fid][<span class="number">0</span>] == <span class="number">3</span>)&#123;</span><br><span class="line">        x = getN(P[p],C[fid]) == fres?<span class="number">2</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x<span class="number">-1</span>;</span><br><span class="line">    assert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x--)res*=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(Tree *now, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;sta, <span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep == <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sta.size() &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sta.size())now -&gt; ans = sta[<span class="number">0</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Jsta[<span class="number">3</span>];</span><br><span class="line">    F(<span class="number">120</span>)&#123;</span><br><span class="line">        now -&gt; fid = i;</span><br><span class="line">        <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        Fi(j,<span class="number">3</span>)&#123;</span><br><span class="line">            Jsta[j] = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p:sta)<span class="keyword">if</span>(s_check(p, i, j))&#123;</span><br><span class="line">                Jsta[j].push_back(p);</span><br><span class="line">            &#125;</span><br><span class="line">            ok &amp;= Jsta[j].size() &lt;= pow3(<span class="number">5</span>-dep);</span><br><span class="line">            <span class="keyword">if</span>(!ok)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok)Fi(j,<span class="number">3</span>)ok &amp;= DFS(now-&gt;ch[j], Jsta[j], dep+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ok)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">call</span><span class="params">(<span class="keyword">int</span> *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        res = getHeaviest(c[<span class="number">1</span>],c[<span class="number">2</span>],c[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">        res = getLightest(c[<span class="number">1</span>],c[<span class="number">2</span>],c[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="number">2</span>)&#123;</span><br><span class="line">        res = getMedian(c[<span class="number">1</span>],c[<span class="number">2</span>],c[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="number">3</span>)&#123;</span><br><span class="line">        res = getNextLightest(c[<span class="number">1</span>],c[<span class="number">2</span>],c[<span class="number">3</span>],c[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    F(<span class="number">3</span>)<span class="keyword">if</span>(res == c[i+<span class="number">1</span>])<span class="keyword">return</span> i;</span><br><span class="line">    assert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">Chino</span><span class="params">(Tree *now, <span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep == <span class="number">6</span>)&#123;</span><br><span class="line">        assert(now-&gt;ans != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> P[now-&gt;ans];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = call(C[now-&gt;fid]);</span><br><span class="line">    <span class="keyword">return</span> Chino(now-&gt;ch[res], dep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">main()&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">6</span>];</span><br><span class="line">    F(<span class="number">6</span>)tmp[i] = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        F(<span class="number">6</span>)P[p][i] = tmp[i];</span><br><span class="line">        p++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(tmp,tmp+<span class="number">6</span>));</span><br><span class="line">    assert(p == <span class="number">720</span>);</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    F(<span class="number">3</span>)Fi(j,<span class="number">6</span>)Fl(k,j+<span class="number">1</span>,<span class="number">6</span>)Fl(l,k+<span class="number">1</span>,<span class="number">6</span>)&#123;</span><br><span class="line">        C[p][<span class="number">0</span>] = i;</span><br><span class="line">        C[p][<span class="number">1</span>] = j+<span class="number">1</span>;</span><br><span class="line">        C[p][<span class="number">2</span>] = k+<span class="number">1</span>;</span><br><span class="line">        C[p][<span class="number">3</span>] = l+<span class="number">1</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    F(<span class="number">6</span>)Fl(j,i+<span class="number">1</span>,<span class="number">6</span>)Fl(k,j+<span class="number">1</span>,<span class="number">6</span>)Fi(l,<span class="number">6</span>)<span class="keyword">if</span>(l!=i&amp;&amp;l!=j&amp;&amp;l!=k)&#123;</span><br><span class="line">        C[p][<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">        C[p][<span class="number">1</span>] = i+<span class="number">1</span>;</span><br><span class="line">        C[p][<span class="number">2</span>] = j+<span class="number">1</span>;</span><br><span class="line">        C[p][<span class="number">3</span>] = k+<span class="number">1</span>;</span><br><span class="line">        C[p][<span class="number">4</span>] = l+<span class="number">1</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(p == <span class="number">120</span>);</span><br><span class="line">    Tree *RT = <span class="keyword">new</span> Tree(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">    F(<span class="number">720</span>)sta.push_back(i);</span><br><span class="line">    <span class="keyword">if</span>(!DFS(RT, sta, <span class="number">0</span>))<span class="built_in">cout</span>&lt;&lt;<span class="string">"Build Error!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> t = Init();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        orderCoins();</span><br><span class="line">        answer(Chino(RT, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tioj.ck.tp.edu.tw/problems/1885&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tioj.ck.tp.edu.tw/problems/1885&lt;/a&gt;&lt;br&gt;這是題爆搜題，可是我卻寫了一整天，還重寫了一遍才AC。&lt;br&gt;不過果然又是AC後覺得不難寫的題目…。&lt;br&gt;感覺IOI 2015 Day1的題目想要AC都要發現一些很漂亮的性質啊！&lt;/p&gt;
    
    </summary>
    
      <category term="Code 備忘錄" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/"/>
    
      <category term="Search" scheme="http://chino.taipei/categories/Code-%E5%82%99%E5%BF%98%E9%8C%84/Search/"/>
    
    
      <category term="C++" scheme="http://chino.taipei/tags/C/"/>
    
      <category term="TIOJ" scheme="http://chino.taipei/tags/TIOJ/"/>
    
      <category term="IOI" scheme="http://chino.taipei/tags/IOI/"/>
    
      <category term="DFS" scheme="http://chino.taipei/tags/DFS/"/>
    
  </entry>
  
</feed>
